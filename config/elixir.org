#+BABEL: :cache yes
#+PROPERTY: header-args :export none :results silent

* Elixir

  Spacemacs is configured to use the default Elixir layer with LSP as its
  backend, but the LSP layer has a few shortcomings for Elixir development.

  First and foremost, watching files for changes doesn't work well with Elixir
  out of the box. This is because =lsp-mode= watches subdirectories you would
  expect to be ignored in an Elixir project. Those subdirectories need to be
  appended to the =lsp-mode= defaults:

  #+NAME: lsp-ignore
  #+BEGIN_SRC emacs-lisp
    (customize-push-and-save 'lsp-file-watch-ignored
                             '("deps/" "_build/" ".elixir_ls/" "helm/" ".github/" ".dialyzer/"))
  #+END_SRC

  Next, the LSP layer adds a bunch of keybindings that aren't supported by
  =elixir-ls=. The layer also hides its buffer formatting function behind an
  otherwise-useless prefix key. The following block removes the unimplemented
  function keybindings and moves buffer formatting to ~SPC m =~:

  #+NAME: lsp-kbd
  #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'elixir-mode
      (define-key spacemacs-lsp-mode-map (kbd "a") nil)
      (define-key spacemacs-lsp-mode-map (kbd "r") nil)
      (define-key spacemacs-lsp-mode-map (kbd "x") nil)
      (define-key spacemacs-lsp-mode-map (kbd "=") 'lsp-format-buffer))
  #+END_SRC

  The last issue with Elixir and LSP is running tests. With =alchemist=, it's
  really easy to run tests inside of Emacs. I want that to be the case with
  the LSP backend too, so my layer adds =exunit.el=. Like alchemist, test execution
  functions can be found under the ~SPC m t~ prefix key.

  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/private/my-elixir/packages.el :noweb yes
    (defconst my-elixir-packages
      '(exunit lsp-mode popwin))

    (defun my-elixir/init-exunit ()
      (use-package exunit
        :config
        (exec-path-from-shell-initialize)
        (spacemacs/declare-prefix-for-mode 'elixir-mode "mt" "test" "mix test")
        (spacemacs/set-leader-keys-for-major-mode 'elixir-mode
          "t <tab>" 'exunit-toggle-file-and-test
          "t <backtab>" 'exunit-toggle-file-and-test-other-window
          "ta" 'exunit-verify-all
          "tb" 'exunit-verify
          "tt" 'exunit-verify-single
          "tr" 'exunit-rerun
          "tu" 'exunit-verify-all-in-umbrella)))

    (defun my-elixir/post-init-lsp-mode ()
      (use-package lsp-mode
        :config
        <<lsp-kbd>>
        <<lsp-ignore>>))

    (defun my-elixir/post-init-popwin ()
      (use-package popwin
        :config
        (push '("*exunit-compilation*" :dedicated t :position right :stick t)
              popwin:special-display-config)))
  #+END_SRC

  I'm a dialyzer fan and user. Running ~mix dialyzer~ inside Emacs should be
  as easy as running ~mix test~ is with =exunit.el=. The next block adds some
  functions to make it so. Dialyzer's output should look like =exunit.el= output, too.

  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/private/my-elixir/funcs.el
    (defun my-elixir/mix-do (task directory)
      (let ((default-directory directory))
        (exunit-do-compile (s-join " " `("mix" ,task)))))

    (defun my-elixir/dialyze-project ()
      (interactive)
      (my-elixir/mix-do "dialyzer" (exunit-project-root)))

    (defun my-elixir/dialyze-umbrella ()
      (interactive)
      (my-elixir/mix-do "dialyzer" (exunit-umbrella-project-root)))
  #+END_SRC

  Dialyzer functions can be executed under the ~SPC m d~ prefix:

  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/private/my-elixir/keybindings.el
    (spacemacs/declare-prefix-for-mode 'elixir-mode "md" "dialyzer" "mix dialyzer")
    (spacemacs/set-leader-keys-for-major-mode 'elixir-mode
      "da" 'my-elixir/dialyze-project
      "du" 'my-elixir/dialyze-umbrella)
  #+END_SRC

** Installation

   This file does NOT install Spacemacs or the Elixir language server. Run these
   commands to do so yourself:

   #+BEGIN_SRC sh
     git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d
     cd ~/.emacs.d
     git checkout develop

     git clone https://github.com/elixir-lsp/elixir-ls ~/.elixirls
     cd ~/.elixirls
     mix deps.get
     mix compile
     mix elixir_ls.release -o release
   #+END_SRC
