#+BABEL: :cache yes
#+PROPERTY: header-args :export none :results silent

* Org

  If you can't tell from this repository, I use =org-mode=. I'm an everyday
  user of =org-capture= and =org-agenda=.

  Capture templates let me get my thoughts/ideas/TODOs into =org-mode= quickly.
  I use one template that allows to me optionally capture an item's task status (TODO/DONE),
  priority, and deadline.

  #+BEGIN_SRC text :tangle ~/.emacs.d/private/capture.orgcaptmpl
    *%(let ((todo-p (y-or-n-p "TODO? "))) (if todo-p " TODO" ""))%(let* ((input (upcase (read-string "Priority [A-E]: "))) (priority (string-trim input))) (if (string-empty-p priority) "" (format " [#%s]" priority))) %^{Summary} %^g
      %(let* ((deadline-p (y-or-n-p "Deadline? ")) (deadline (when deadline-p (org-time-stamp nil)))) (if deadline-p (format "DEADLINE: %s" deadline) ""))
  #+END_SRC

  Access to these templates should be easy. Spacemacs' =org= layer adds
  ~SPC a o c~ for capture. This configuration block makes the templates immediately
  available to that keybinding.

  #+NAME: org-capture-keys
  #+BEGIN_SRC emacs-lisp
    (setq org-capture-templates
          '(("h" "Hindsight" entry
             (file+olp+datetree "~/code/hindsight/TODOs.org")
             (file "~/.emacs.d/private/capture.orgcaptmpl"))
            ("p" "Personal" entry
             (file+olp+datetree "~/Notes/thoughts.org")
             (file "~/.emacs.d/private/capture.orgcaptmpl"))
            ("w" "Work" entry
             (file+olp+datetree "~/Notes/work.org")
             (file "~/.emacs.d/private/capture.orgcaptmpl"))))
  #+END_SRC

  Capturing notes and TODOs would be useless without an interface to make
  sense of them all. I use a custom =org-agenda= to do just that. It breaks TODOs
  and backlog items into categories based on tags and priorities, while
  displaying my day in a time grid.

  #+NAME: org-agenda-ui
  #+BEGIN_SRC emacs-lisp
    (setq org-agenda-use-time-grid t
          org-agenda-time-grid     '((daily today required-time)
                                     (800 1200 1600 2000) " ..." ""))

    (setq org-agenda-custom-commands
          '(("c" "Custom"
             ((agenda "" ((org-agenda-span 3)
                          (org-agenda-overriding-header " ")
                          (org-agenda-skip-deadline-if-done t)
                          (org-deadline-warning-days 7)))
              (tags-todo "/!TODO" ((org-agenda-files '("~/Notes/work.org"))
                                  (org-agenda-overriding-header "Work:")))
              (tags-todo "/!TODO" ((org-agenda-files '("~/code/hindsight/TODOs.org"))
                                  (org-agenda-overriding-header "Open source:")))
              (tags-todo "/!TODO" ((org-agenda-files '("~/Notes/thoughts.org"))
                                  (org-agenda-overriding-header "Other:")))
              (tags-todo "/!BKLG" ((org-agenda-overriding-header "Ice box:")))))))
  #+END_SRC

  My =org-agenda= UI should be easily accessible, but the default keybinding
  requires traversing an extra menu. The following function takes me directly to
  my preferred agenda view:

  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/private/my-org/funcs.el
    (defun my-org/agenda ()
      (interactive)
      (org-agenda nil "c"))
  #+END_SRC

  The =my-org/agenda= function is bound globally to ~SPC a o a~:

  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/private/my-org/keybindings.el
    (spacemacs/set-leader-keys "aoa" 'my-org/agenda)
  #+END_SRC

  My action items are tracked in =org-mode= with statuses of =TODO= or =BKLG=.
  They can be marked complete with statuses of =DONE= or =CNCL=. When an item is
  completed, a timestamp is logged.

  Action items can have priorities of =A= through =F=. =F= is the lowest (and
  default) priority.

  #+NAME: org-todo-config
  #+BEGIN_SRC emacs-lisp
    (setq org-log-done         'time
          org-log-refile       'time
          org-lowest-priority  ?F
          org-default-priority ?F
          org-todo-keywords    '((sequence "TODO(t)" "|" "DONE(d)" "CNCL(c)")
                                 (sequence "BKLG(b)" "|")))
  #+END_SRC

  I use a diary file to track significant dates and one-off events. Birthdays,
  anniversaries, and doctor appointments all go into a diary file. And of course,
  that diary file should show up in my =org-agenda=:

  #+NAME: org-agenda-diary
  #+BEGIN_SRC emacs-lisp
    (setq org-agenda-include-diary t
          diary-file               "~/Notes/appointments")
  #+END_SRC

  By default, =org-agenda= doesn't show the day's events. I prefer it show
  when I mark an action item as =DONE=, for example.

  #+NAME: org-agenda-show-log
  #+BEGIN_SRC emacs-lisp
    (setq org-agenda-start-with-log-mode t)
  #+END_SRC

  The final bit of =org= configuration opts into =org-habit= and points
  everything at my =.org= file.

  #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/private/my-org/packages.el :noweb yes
    (defconst my-org-packages
      '((org :location built-in)
        (org-agenda :location built-in)))

    (defun my-org/post-init-org ()
      (require 'org-habit)
      (setq org-agenda-files '("~/Notes/thoughts.org"
                               "~/Notes/work.org"
                               "~/code/hindsight/TODOs.org")))

    (defun my-org/post-init-org-agenda ()
      <<org-agenda-ui>>
      <<org-agenda-show-log>>
      <<org-agenda-diary>>
      <<org-todo-config>>
      <<org-capture-keys>>)
  #+END_SRC

** Installation
   This file does NOT install Spacemacs. Run these commands to do so yourself:

   #+BEGIN_SRC sh :export none
     git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d
     cd ~/.emacs.d
     git checkout develop
   #+END_SRC
