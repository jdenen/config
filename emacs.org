#+TITLE: Emacs Files
#+STARTUP: inlineimages nofold

* Table of Contents :TOC_3:noexport:
  - [[#configel][config.el]]
  - [[#packagesel][packages.el]]
  - [[#initel][init.el]]

** config.el
Place your private configuration here. Remember, you do not need to run
=doom sync= after modifying this file.

#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/config.el :eval no
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
(setq display-line-numbers-type t
      doom-font "Hasklig-14"
      doom-theme 'doom-one
      org-directory "~/Documents/org/"
      user-full-name "Johnson Denen"
      user-mail-address "johnson.denen@gmail.com")

;; package config
(use-package! exunit
  :hook (elixir-mode . exunit-mode))

(use-package! forge
  :config (setq forge-topic-list-limit '(10 . 0)))

(use-package! lsp-mode
  :hook (elixir-mode . lsp)
  :init (setq lsp-elixir-dialyzer-enabled nil
              lsp-elixir-project-dir ""))

(use-package! mix
  :hook (elixir-mode . mix-minor-mode)
  :config (setq compilation-scroll-output t))

(use-package! popwin
  :hook (elixir-mode . popwin-mode)
  :config
  (let ((buffer-pattern "\\*Flycheck*\\|\\*exunit-*\\|\\*mix ex*"))
    (push `(,buffer-pattern
            :regexp t
            :dedicated t
            :stick t
            :noselect t
            :position right
            :width 0.30)
          popwin:special-display-config)
    (push '("magit\\:*"
            :regexp t
            :position right
            :width 0.30)
          popwin:special-display-config)))

;; package hooks
(after! lsp-clients
  (let ((ignore-list (append lsp-file-watch-ignored
                             '("deps/" "_build/" ".elixir_ls/" "assets/" "docs/"))))
    (setq lsp-file-watch-ignored ignore-list)))

(after! lsp-ui
  (setq lsp-ui-doc-enable nil
        lsp-ui-doc-delay 1.5
        lsp-ui-doc-max-height 20
        lsp-ui-doc-max-width 80
        lsp-ui-doc-use-childframe t
        lsp-ui-doc-position 'top
        lsp-ui-doc-use-webkit nil
        lsp-ui-sideline-ignore-duplicate t))

;; functions
(defun exunit-kill-compilation ()
  "Kill *exunit-compilation* buffer and window."
  (interactive)
  (let* ((bname "*exunit-compilation*")
         (window (get-buffer-window bname)))
    (delete-window window)
    (kill-buffer bname)))

(defun mix/execute-task-umbrella ()
  "Run mix command in umbrella project."
  (interactive)
  (let ((mix-start-in-umbrella t))
    (mix-execute-task)))

(defun mix/format-buffer ()
  "Format current buffer. Save before running formatter command."
  (interactive)
  (let ((file-to-format (file-relative-name (buffer-file-name) (exunit-project-root)))
        (default-directory (exunit-project-root)))
    (save-buffer)
    (shell-command (s-join " " `("mix" "format" ,file-to-format)))
    ;; reload file after possible changes
    (revert-buffer :ignore-auto :noconfirm :preserve)))

(defun projectile-relative-path ()
  "Get file path relative to project root."
  (file-relative-name (buffer-file-name) (projectile-project-root)))

(defun projectile-yank-path ()
  "Copy file path to clipboard, relative to project root."
  (interactive)
  (let ((path-from-root (projectile-relative-path)))
    (kill-new path-from-root)
    (message path-from-root)))

(defun projectile-yank-line-number ()
  "Copy current line in file to clipboard, relative to project root."
  (interactive)
  (let* ((line-no (number-to-string (line-number-at-pos)))
         (from-root-with-line (concat (projectile-relative-path) ":" line-no)))
    (kill-new from-root-with-line)
    (message from-root-with-line)))

(defun elixir-trace ()
  "Start tracing module based on user input"
  (interactive)
  (let* ((module (read-string "Start tracing: "))
         (text (format "\nPath.expand(\"~/.tracer.ex\") |> Code.require_file()\nTracer.start_tracing(%s)\n" module)))
    (evil-open-below 1)
    (insert text)
    (mix/format-buffer)))

(defun elixir-inspect ()
  "IO.inspect"
  (interactive)
  (let* ((object (read-string "Inspecting: "))
         (label (read-string "Label: "))
         (text (format "\nIO.inspect(%s, label: \"%s\")\n" object label)))
    (evil-open-below 1)
    (insert text)
    (mix/format-buffer)))

(defun elixir-remove-inspects ()
  "Function to remove all IO.inspect/2 lines in a buffer."
  (interactive)
  (evil-goto-first-line)
  (replace-regexp "IO.inspect\(.*\)$" "")
  (mix/format-buffer))

;; keybindings
(map! :leader
      :prefix "p"
      :ne "y" #'projectile-yank-path
      :ne "Y" #'projectile-yank-line-number
      :prefix "w"
      :ne "C-d" #'ace-delete-window
      :ne "C-p" #'popwin:close-popup-window
      :prefix "TAB"
      :ne "j" #'+workspace/switch-left
      :ne "k" #'+workspace/switch-right
      :ne "-" #'+workspace/other)

(map! :mode elixir-mode
      :localleader
      :ne "=" #'mix/format-buffer
      :ne "m" #'mix-execute-task
      :ne "u" #'mix/execute-task-umbrella
      :prefix ("t" . "Testing")
      :ne "<backtab>" #'exunit-toggle-file-and-test-other-window
      :ne "<tab>" #'exunit-toggle-file-and-test
      :ne "a" #'exunit-verify-all
      :ne "b" #'exunit-verify
      :ne "q" #'exunit-kill-compilation
      :ne "r" #'exunit-rerun
      :ne "t" #'exunit-verify-single
      :ne "u" #'exunit-verify-all-in-umbrella)
#+END_SRC
** packages.el
To install a package with Doom, you must declare them here and run =doom sync=
on the command line, then restart Emacs for the changes to take effect -- or
use =M-x doom/reload=.

#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/packages.el :eval no
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
(package! alchemist :disable t)
(package! exunit)
(package! mix)
(package! popwin)
(unpin! lsp-mode)
#+END_SRC

** init.el
This file controls what Doom modules are enabled and what order they load
in. Remember to run =doom sync= after modifying it.

#+BEGIN_SRC emacs-lisp :tangle ~/.doom.d/init.el :eval no
;;; init.el -*- lexical-binding: t; -*-
(doom! :input
       :completion
       company                        ; the ultimate code completion backend
       ivy                            ; a search engine for love and life

       :ui
       doom                           ; what makes DOOM look the way it does
       doom-dashboard                 ; a nifty splash screen for Emacs
       doom-quit                      ; DOOM quit-message prompts when you quit Emacs
       hl-todo                        ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       (ligatures +hasklig)           ; ligatures and symbols to make your code pretty again
       modeline                       ; snazzy, Atom-inspired modeline, plus API
       ophints                        ; highlight the region an operation acts on
       (popup +defaults)              ; tame sudden yet inevitable temporary windows
       vc-gutter                      ; vcs diff in the fringe
       vi-tilde-fringe                ; fringe tildes to mark beyond EOB
       (window-select +switch-window) ; visually switch windows
       workspaces                     ; tab emulation, persistence & separate workspaces

       :editor
       (evil +everywhere)             ; come to the dark side, we have cookies
       file-templates                 ; auto-snippets for empty files
       fold                           ; (nigh) universal code folding
       snippets                       ; my elves. They type so I don't have to

       :emacs
       dired                          ; making dired pretty [functional]
       electric                       ; smarter, keyword-based electric-indent
       undo                           ; persistent, smarter undo for your inevitable mistakes
       vc                             ; version-control and Emacs, sitting in a tree

       :checkers
       syntax                         ; tasing you for every semicolon you forget

       :tools
       direnv
       editorconfig                   ; let someone else argue about tabs vs spaces
       (eval +overlay)                ; run code, run (also, repls)
       lookup                         ; navigate your code and its documentation
       lsp
       (magit +forge)                 ; a git porcelain for Emacs

       :os
       (:if IS-MAC macos)             ; improve compatibility with macOS

       :lang
       elixir                         ; erlang done right
       emacs-lisp                     ; drown in parentheses
       erlang                         ; an elegant language for a more civilized age
       json                           ; At least it ain't XML
       markdown                       ; writing docs for people to ignore
       org                            ; organize your plain life in plain text
       sh                             ; she sells {ba,z,fi}sh shells on the C xor

       :config
       (default +bindings +smartparens))
#+END_SRC
