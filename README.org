* Machine configuration
** Bootstrapping
   Evaluate (=C-c C-c=) this script:
   #+BEGIN_SRC emacs-lisp :eval yes :noweb yes :results silent
     (unless (file-exists-p "~/.emacs.d")
       (copy-directory ".emacs.d" "~/.emacs.d" t nil t))

     (unless (file-exists-p "~/.notebooks")
       (copy-directory ".notebooks" "~/.notebooks" t nil t))

     (unless (file-exists-p "~/.git-completion.bash")
       (copy-file ".git-completion.bash" "~/" t t))

     (unwind-protect (org-babel-lob-ingest "private.org")
       (delete-file "private.org"))

     (make-directory "~/.templates" t)
     (org-babel-tangle)
   #+END_SRC
** Executing the script...
**** Bash
     ... tangles this block into =~/.bash_profile=:
     #+BEGIN_SRC sh :tangle ~/.bash_profile :export none :results silent
       #!/bin/bash

       alias ls='ls -lF'
       alias be='bundle exec'

       PS1_DATE="\[\033[32m\]\d"
       PS1_TIME="\[\033[1;36m\]\T"
       PS1_PWD="\[\033[0;37m\]\W"

       export PS1="$PS1_DATE $PS1_TIME\n$PS1_PWD\[\033[0m\] $ "
       export PATH="${PATH}:${HOME}/.rbenv/bin"
       export GPG_TTY=$(tty)
       export SKDMAN_DIR="${HOME}/.sdkman"

       source "${HOME}/.git-completion.bash"
       [[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"

       eval "$(rbenv init -)"
     #+END_SRC
**** Chrome
     ... uses this block to configure Emacs for =atomic-chrome=:
     #+NAME: chrome-config
     #+BEGIN_SRC emacs-lisp :export none :results silent
       ;; chrome config
       (use-package atomic-chrome
         :init
         (atomic-chrome-start-server))
     #+END_SRC
**** Emacs
     ... copies the submodule of my [[https://github.com/jdenen/spacemacs][Spacemacs]] fork into =~/.emacs.d=:
**** Emacs packages
     ... tangles this block into my Spacemacs configuration. This is specific to the Emacs packages
     that I develop, so I like to configure them independent of my Spacemacs config.
     #+NAME: emacs-packaging
     #+BEGIN_SRC emacs-lisp
       ;; Emacs packaging
       (use-package exercism
         :load-path "~/Code/me/exercism.el")
       (use-package mastodon
         :load-path "~/Code/me/mastodon.el/lisp")
     #+END_SRC
**** Exercism
     ... tangles this block into =~/.exercism.json=, importing my =apiKey= from an another file:
     #+BEGIN_SRC js :tangle ~/.exercism.json :export none :results silent :noweb yes
       {
           "apiKey": <<exercism-key>>,
           "dir": "/Users/johnson/Code/me/koans",
           "api": "http://exercism.io",
           "xapi": "http://x.exercism.io"
       }
     #+END_SRC
**** Git
     ... tangles this block into =~/.gitconfig=:
     #+BEGIN_SRC conf :tangle ~/.gitconfig :export none :results silent
       [user]
       name = Johnson Denen
       email = johnson.denen@gmail.com

       [alias]
       root = rev-parse --show-toplevel
       log = log --graph

       [color]
       ui = true

       [diff]
       renames = true

       [fetch]
       prune = true

       [github]
       user = jdenen

       [pull]
       rebase = true

       [push]
       default = simple
       ff = false

       [rerere]
       enabled = true
     #+END_SRC
**** Org
     ... tangles this block into =~/.templates/deadline.orgcaptmpl=:
     #+BEGIN_SRC text :tangle ~/.templates/deadline.orgcaptmpl :export none :results silent
       * TODO [#%^{priority|A|B|C|D|E}] %^{Summary} %^g
         DEADLINE: %^{Due}t
         %?
     #+END_SRC
     ... tangles this block into =~/.templates/note.orgcaptmpl=:
     #+BEGIN_SRC text :tangle ~/.templates/note.orgcaptmpl :export none :results silent
       * %^{Summary} %^g
         %?
     #+END_SRC
     ... tangles this block into =~/.templates/reminder.orgcaptmpl=:
     #+BEGIN_SRC text :tangle ~/.templates/reminder.orgcaptmpl :export none :results silent
       * BKLG [#E] %^{Reminder}
     #+END_SRC
     ... uses this block to configure =org-mode=, =org-capture=, and =org-agenda=:
     #+NAME: org-config
     #+BEGIN_SRC emacs-lisp :export none :results silent
       ;; org-config
       (defun org-agenda-and-todos ()
         "Show `org-agenda' with a global list of TODOs."
         (interactive)
         (org-agenda nil "n"))
       (spacemacs/set-leader-keys "aoa" 'org-agenda-and-todos)
       (setq org-agenda-start-with-log-mode t
             org-agenda-use-time-grid       t
             org-agenda-include-diary       t
             org-log-done                   'time
             org-log-refile                 'time
             org-lowest-priority            ?E
             org-default-priority           ?C
             diary-file                     "~/.notebooks/diary"
             org-agenda-files
             '("~/.notebooks/deadlines.org"
               "~/.notebooks/notes.org"
               "~/.notebooks/reminders.org")
             org-refile-targets
             '((nil :maxlevel . 1)
               (org-agenda-files :maxlevel . 1))
             org-todo-keywords
             '((sequence "BKLG(b)" "TODO(t)" "NEXT(n)" "WIP(w)" "|" "DONE(d)" "CNCL(c)"))
             org-capture-templates
             '(("l" "To read" entry
                (file+headline "~/.notebooks/reminders.org" "Reading list")
                (file "~/.templates/reminder.orgcaptmpl"))
               ("m" "Note for me" entry
                (file+headline "~/.notebooks/notes.org" "Personal")
                (file "~/.templates/note.orgcaptmpl"))
               ("r" "Reminder" entry
                (file+headline "~/.notebooks/reminders.org" "Reminders")
                (file "~/.templates/reminder.orgcaptmpl"))
               ("t" "Task" entry
                (file+olp+datetree "~/.notebooks/deadlines.org")
                (file "~/.templates/deadline.orgcaptmpl"))
               ("w" "Note for work" entry
                (file+headline "~/.notebooks/notes.org" "Work")
                (file "~/.templates/note.orgcaptmpl"))))
     #+END_SRC
**** Python
     ... uses this block to configure Emacs for Python development:
     #+NME: python-config
     #+BEGIN_SRC emacs-lisp :export none :results silent
       ;; Python config
       (add-to-list 'pytest-project-root-files "Pipfile")
     #+END_SRC
**** Registers
     ... uses this block to configure Emacs registers:
     #+NAME: register-config
     #+BEGIN_SRC emacs-lisp :export none :results silent
       ;; register-config
       (dolist (pair '((?c . "~/Code/me/dot/README.org")
                       (?d . "~/.notebooks/deadlines.org")
                       (?n . "~/.notebooks/notes.org")
                       (?r . "~/.notebooks/reminders.org")))
         (let ((key (car pair))
               (place (cdr pair)))
           (set-register key `(file . ,place))))
       (spacemacs/set-leader-keys "oj" 'jump-to-register)
     #+END_SRC
**** Ruby
     ... tangles this block into =~/.gemrc=:
     #+BEGIN_SRC yaml :tangle ~/.gemrc :export none :results silent
       ---
       :backtrace: false
       :bulk_threshold: 1000
       :sources:
         - https://rubygems.org/
       :update_sources: true
       :verbose: true
       install: "--no-rdoc --no-ri"
       update: "--no-rdoc --no-ri"
     #+END_SRC
     ... tangles this block into =~/.pryrc=:
     #+BEGIN_SRC ruby :tangle ~/.pryrc :export none :results silent
       Pry.config.correct_indent = false if ENV["INSIDE_EMACS"]
       Pry.config.editor = "emacsclient"
     #+END_SRC
**** Spacemacs
     ... tangles this block into =~/.spacemacs=:
     #+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs :export none :noweb yes
       ;; -*- mode: emacs-lisp -*-
       (defun dotspacemacs/layers ()
         "Layer configuration:
       This function should only modify configuration layer settings."
         (setq-default dotspacemacs-distribution 'spacemacs
                       dotspacemacs-enable-lazy-installation 'unused
                       dotspacemacs-ask-for-lazy-installation nil
                       dotspacemacs-configuration-layer-path '("~/Code/me/dot/layers")
                       dotspacemacs-configuration-layers '((better-defaults)
                                                           (docker)
                                                           (elixir)
                                                           (emacs-lisp)
                                                           (evil-commentary)
                                                           (git)
                                                           (markdown)
                                                           (org :packages
                                                                (not orgit
                                                                     org-present
                                                                     org-pomodoro
                                                                     org-plus-contrib)
                                                                :variables
                                                                org-enable-reveal-js-support t)
                                                           (osx)
                                                           (python :variables
                                                                   python-test-runner 'pytest)
                                                           (ruby :packages
                                                                 (not rvm)
                                                                 :variables
                                                                 ruby-test-runner 'rspec
                                                                 ruby-version-manager 'rbenv)
                                                           (scheme)
                                                           (shell :variables
                                                                  shell-default-shell 'shell)
                                                           (shell-scripts :packages
                                                                          (not fish-mode))
                                                           (shell-scripts)
                                                           (syntax-checking)
                                                           (vinegar)
                                                           (yaml))
                       dotspacemacs-additional-packages '(ample-theme
                                                          atomic-chrome
                                                          cask
                                                          copy-as-format
                                                          el-mock
                                                          multiple-cursors
                                                          package-lint
                                                          panda-theme)
                       dotspacemacs-excluded-packages '()
                       dotspacemacs-delete-orphan-packages t))

       (defun dotspacemacs/init ()
         (setq-default dotspacemacs-elpa-https t
                       dotspacemacs-elpa-timeout 5
                       dotspacemacs-verify-spacelpa-archives nil
                       dotspacemacs-check-for-update nil
                       dotspacemacs-elpa-subdirectory 'emacs-version
                       dotspacemacs-editing-style 'hybrid
                       dotspacemacs-verbose-loading nil
                       dotspacemacs-startup-banner 'official
                       dotspacemacs-startup-lists '((recents . 5)
                                                    (projects . 5))
                       dotspacemacs-startup-buffer-responsive t
                       dotspacemacs-scratch-mode 'emacs-lisp-mode
                       dotspacemacs-themes '(ample panda)
                       dotspacemacs-colorize-cursor-according-to-state t
                       dotspacemacs-default-font '("Droid Sans Mono"
                                                   :size 13
                                                   :weight normal
                                                   :width normal
                                                   :powerline-scale 1.1)
                       dotspacemacs-leader-key "SPC"
                       dotspacemacs-emacs-command-key "SPC"
                       dotspacemacs-ex-command-key ":"
                       dotspacemacs-emacs-leader-key "M-m"
                       dotspacemacs-major-mode-leader-key ","
                       dotspacemacs-major-mode-emacs-leader-key "C-M-m"
                       dotspacemacs-distinguish-gui-tab nil
                       dotspacemacs-remap-Y-to-y$ t
                       dotspacemacs-retain-visual-state-on-shift t
                       dotspacemacs-visual-line-move-text nil
                       dotspacemacs-ex-substitute-global nil
                       dotspacemacs-default-layout-name "Default"
                       dotspacemacs-display-default-layout nil
                       dotspacemacs-auto-resume-layouts nil
                       dotspacemacs-auto-generate-layout-names nil
                       dotspacemacs-large-file-size 1
                       dotspacemacs-auto-save-file-location 'cache
                       dotspacemacs-max-rollback-slots 5
                       dotspacemacs-helm-resize nil
                       dotspacemacs-helm-no-header nil
                       dotspacemacs-helm-position 'bottom
                       dotspacemacs-helm-use-fuzzy 'always
                       dotspacemacs-enable-paste-transient-state t
                       dotspacemacs-which-key-delay 0.4
                       dotspacemacs-which-key-position 'bottom
                       dotspacemacs-switch-to-buffer-prefers-purpose nil
                       dotspacemacs-loading-progress-bar nil
                       dotspacemacs-fullscreen-at-startup nil
                       dotspacemacs-fullscreen-use-non-native nil
                       dotspacemacs-maximized-at-startup t
                       dotspacemacs-active-transparency 90
                       dotspacemacs-inactive-transparency 90
                       dotspacemacs-show-transient-state-title t
                       dotspacemacs-show-transient-state-color-guide t
                       dotspacemacs-mode-line-unicode-symbols t
                       dotspacemacs-smooth-scrolling t
                       dotspacemacs-line-numbers t
                       dotspacemacs-folding-method 'evil
                       dotspacemacs-smartparens-strict-mode nil
                       dotspacemacs-smart-closing-parenthesis nil
                       dotspacemacs-highlight-delimiters 'all
                       dotspacemacs-persistent-server nil
                       dotspacemacs-search-tools '("ag")
                       dotspacemacs-default-package-repository nil
                       dotspacemacs-frame-title-format "%I@%S"
                       dotspacemacs-icon-title-format nil
                       dotspacemacs-whitespace-cleanup 'changed
                       dotspacemacs-zone-out-when-idle nil
                       dotspacemacs-pretty-docs nil))

       (defun dotspacemacs/user-init ())

       (defun dotspacemacs/user-config ()
         <<chrome-config>>
         <<emacs-packaging>>
         <<org-config>>
         <<python-config>>
         <<register-config>>)
     #+END_SRC
**** Vim
     ... tangles this block into =~/.vimrc=:
     #+BEGIN_SRC vimrc
       :set tabstop=4
       :set shiftwidth=4
       :set expandtab
       :syntax enable
       :set number
     #+END_SRC
