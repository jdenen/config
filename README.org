# Local Variables:
# org-confirm-babel-evaluate: nil
# End:

* Dot
  Configuration files and software packages that I need to function. They're all wrapped up in a nice, literate README.

  Using this README assumes an installation of Emacs. For now, it will also assume a =darwin= OS.
** Configuration
   :PROPERTIES:
   :header-args: :comments link :results silent
   :END:

   Use =tangle= to provision my config files. Executing this block with =C-c C-c= will make it happen.

   #+BEGIN_SRC emacs-lisp :eval yes :noweb yes
     (dolist (dir '("~/.spacemacs.d/layers" "~/.spacemacs.d/templates")) (make-directory dir t))
     (org-babel-lob-ingest "~/vc-docs/scratch.org")
     (org-babel-tangle-file (buffer-file-name))
   #+END_SRC
*** ~/.bashrc
    My =changelog= function is dependent on an alias defined in my =.gitconfig= below.

    My command line prompt ends up looking like:
    #+BEGIN_SRC sh :eval no
       Mon Jan 30 12:00:00
       ~ $
    #+END_SRC

    #+BEGIN_SRC sh :tangle ~/.bashrc :export none :noweb yes
       function changelog() {
           git changelog ${1} ${2} | grep -vE 'Bump|Squashed'
       }

       function dmenv() {
           docker-machine start default
           docker-machine regenerate-certs default
           eval "$(docker-machine env default)"
       }

       alias ls='ls -lF'
       alias freq='history | cut -c8- | sort | uniq -c | sort -rn | head'
       alias root='cd $(git rev-parse --show-toplevel)'
       alias be='bundle exec'
       alias dm='docker-machine'
       alias src='source ~/.bashrc'

       PS1_DATE="\[\033[32m\]\d"
       PS1_TIME="\[\033[1;36m\]\T"
       PS1_PWD="\[\033[0;37m\]\W"
       export PS1="$PS1_DATE $PS1_TIME\n$PS1_PWD\[\033[0m\] $ "

       export SDKMAN_DIR="~/.sdkman"
       [[ -s "~/.sdkman/bin/sdkman-init.sh" ]] && source "~/.sdkman/bin/sdkman-init.sh"
    #+END_SRC
*** ~/.bash_profile
    #+BEGIN_SRC sh :tangle ~/.bash_profile :export none :noweb yes
      source "$HOME/.bashrc"

      export PATH="$HOME/.nix-profile/bin:$HOME/.rbenv/bin:/usr/local/bin:/usr/local/sbin:$PATH"
      eval "$(rbenv init -)"

      #THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
      export SDKMAN_DIR="$HOME/.sdkman"
      [[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
    #+END_SRC
*** ~/.emacs.notiffany.erb
    Guard uses this erb file to integrate with Emacs. Notification colors are configured in the =.guard.rb= file below.
    #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.notiffany.erb :export none :noweb yes
      (progn
        (unless (boundp 'notiffany-original-background) (setq notiffany-original-background (face-background 'mode-line)))
        (unless (boundp 'notiffany-original-foreground) (setq notiffany-original-foreground (face-foreground 'mode-line)))
        (set-face-attribute 'mode-line nil :background "<%= bgcolor %>" :foreground "<%= color %>")
        (message "<%= message %>")

        (run-at-time "5 sec" nil (lambda ()
                                   (set-face-attribute 'mode-line nil
                                                       :background notiffany-original-background
                                                       :foreground notiffany-original-foreground))))
    #+END_SRC
*** ~/.gemrc
    #+BEGIN_SRC yaml :tangle ~/.gemrc :export none :noweb yes
      ---
      :backtrace: false
      :bulk_threshold: 1000
      :sources:
      - https://rubygems.org/
      :update_sources: true
      :verbose: true
      install: "--no-rdoc --no-ri"
      update: "--no-rdoc --no-ri"
    #+END_SRC
*** ~/.guard.rb
    For integration with Emacs, the guard config makes use of the =.emacs.notiffany.erb= file defined above.
    #+BEGIN_SRC ruby :tangle ~/.guard.rb :export none :noweb yes
      notification(:emacs,
                   elisp_file: '~/.emacs.notiffany.erb',
                   success:   'ForestGreen',
                   failed:    'Firebrick',
                   default:   'Black',
                   fontcolor: 'White')
    #+END_SRC
*** ~/.gitconfig

    Setup my identity with Git using my client email for now.

    #+NAME: gitconfig-public
    #+BEGIN_SRC conf :result silent
      [user]
        name = Johnson P Denen
        email = jdenen@cas.org
      [push]
        default = simple
      [core]
        excludesfile = /Users/$USER/.gitignore_global
      [alias]
        root = rev-parse --show-toplevel
        logg = log --graph
        update-tools = !cd \"~/.cas-git-tools\" && git fetch && git reset --hard origin/master
        changelog = ! git log ${1}..${2:-HEAD} --pretty=format:'* %s'
      [color]
        ui = true
      [rerere]
        enabled = true
      [diff]
        renames = true
      [gerrit]
        createchangeid = true
    #+END_SRC

    Because I have private git configuration, I tangle it using a loaded =src= block. This breaks
    =org-babel-detangle= but =.gitconfig= rarely changes.

    #+BEGIN_SRC conf :tangle ~/.gitconfig :export none :noweb yes
       <<gitconfig-public>>
       <<gitconfig-private>>
    #+END_SRC
*** ~/.pryrc
    #+BEGIN_SRC ruby :tangle ~/.pryrc :export none :noweb yes
      Pry.config.correct_indent = false if ENV["INSIDE_EMACS"]
      Pry.config.editor = "emacsclient"
    #+END_SRC
*** ~/.spacemacs.d/dotfuns.el
    I write a non-trivial amount of functions for use in Emacs. The ones that are not client specific are stored here.

    #+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/dotfuns.el :export none :noweb yes
      (defun move-file (new-location)
        "Write current buffer file to NEW-LOCATION and delete the old one."
        (interactive (list (if buffer-file-name
                               (read-file-name "Move file to: ")
                             (read-file-name "Move file to: "
                                             default-directory
                                             (expand-file-name (file-name-nondirectory (buffer-name))
                                                               default-directory)))))
        (when (file-exists-p new-location)
          (delete-file new-location))
        (let ((old-location (buffer-file-name)))
          (write-file new-location t)
          (when (and old-location
                     (file-exists-p new-location))
            (delete-file old-location))))

      (defcustom my/org-present-edit-p nil "Current `org-present-toggle-edit' status.")

      (defun my/org-present-edit ()
        "Show cursor and allow editing in `org-present-mode'."
        (progn
          (setq my/org-present-edit-p t)
          (org-present-show-cursor)
          (org-present-read-write)))

      (defun my/org-present-no-edit ()
        "Hide cursor and make buffer read-only."
        (progn
          (setq my/org-present-edit-p nil)
          (org-present-hide-cursor)
          (org-present-read-only)))

      (defun my/org-present-toggle-edit ()
        "Toggle edit settings in `org-present-mode'.

      Uses `org-present-edit' and `org-present-no-edit'."
        (interactive)
        (if my/org-present-edit-p
            (my/org-present-no-edit)
          (my/org-present-edit)))

      ;; FIXME
      ;; Execute once and it opens properly. Execute again and it closes properly.
      ;; Execute a third time and it does not open to insert mode.
      (defun multiterm-pop-to-insert-mode()
        "Pop a `multi-term' session in insert mode."
        (interactive)
        (progn
          (spacemacs/shell-pop-multiterm nil)
          (if (eq "term-mode" major-mode)
              (evil-insert 0))))

      (defun org-agenda-and-todos ()
        "Show org-agenda with a global list of TODOs.

      This is the same as =SPC a o o n= in spacemacs."
        (interactive)
        (org-agenda nil "n"))

      (defun copy-current-file-path ()
        "Copy filepath of the buffer file."
        (interactive)
        (if (null (buffer-file-name))
            (user-error "Current buffer is not a file.")
          (progn
            (message "Copied: %s" (buffer-file-name))
            (kill-new (buffer-file-name)))))

      (defun sudo-open-file ()
        "Prompt to open file using sudo."
        (interactive)
        (let ((current-directory (helm-current-directory)))
          (let ((default-directory (concat "/sudo:johnson@localhost:" current-directory)))
            (call-interactively 'helm-find-files))))

      ;; TODO
      ;; Document me!
      (defun pry-edit ()
        (interactive)
        (progn
          (server-edit)
          (ruby-switch-to-inf t)))

      (defun dmenv ()
        "Start and use the default machine while regenerating its certs."
        (interactive)
        (docker-machine-start "default")
        (docker-machine "regenerate-certs" "default")
        (docker-machine-env "default"))

      (defun dired-elsewhere (user loc &optional sudo)
        "Open `dired' to /ssh:USER@LOC:/.

      Optionally, `tramp' in as root if SUDO is non-nil."
        (interactive
         (list
          (read-string "Who: ")
          (read-string "Where: ")))
        (let ((user-at-loc (concat "/ssh:" user "@" loc)))
          (let ((connection-string
                 (if sudo
                     (concat user-at-loc "|sudo:" loc ":/")
                   (concat user-at-loc ":/"))))
            (dired connection-string))))

      (defun sudo-dired-elsewhere (user loc)
        "Open `dired' to /ssh:USER@LOC|sudo:LOC:/ which is equal to /ssh:root@LOC:/."
        (interactive
         (list
          (read-string "Who: ")
          (read-string "Where: ")))
        (dired-elsewhere user loc t))
    #+END_SRC
*** ~/.spacemacs.d/dotsetup.el
    I have a bunch of messy setup in my spacemacs config. I extract it for easier ingestion.
    #+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/dotsetup.el :export none :noweb yes
      (add-hook 'after-init-hook 'inf-ruby-switch-setup)
      (add-hook 'eshell-mode-hook 'with-editor-export-editor)
      (add-hook 'groovy-mode-hook 'groovy-imports-scan-file)
      (add-hook 'ruby-mode-hook 'yard-mode)
      (add-hook 'shell-mode-hook 'with-editor-export-editor)

      (mapcar
       (lambda (r)
         (set-register (car r) (cons 'file (cdr r))))
       '((?b . "~/.bashrc")
         (?r . "~/Code/me/dot/README.org")
         (?s . "~/vc-docs/scratch.org")))

      (setq org-agenda-files               '("~/vc-docs/scratch.org")
            org-agenda-start-with-log-mode t
            org-agenda-use-time-grid       t
            org-agenda-include-all-todo    t
            org-agenda-include-diary       t
            diary-file                     "~/vc-docs/diary"
            org-log-done                   'time)

      (setq org-todo-keywords '((sequence "TODO(t)" "WIP(w)" "VRFY(v)" "|" "DONE(d)")
                                (sequence "BLOCK(b)" "|" "CANCEL")))

      (setq org-capture-templates '(("n" "Note" entry (file+datetree "~/vc-docs/scratch.org")
                                     (file "~/.spacemacs.d/templates/note.orgcaptmpl"))
                                    ("d" "Todo" entry (file+datetree "~/vc-docs/scratch.org")
                                     (file "~/.spacemacs.d/templates/todo.orgcaptmpl"))
                                    ("t" "Task" entry (file+datetree "~/vc-docs/scratch.org")
                                     (file "~/.spacemacs.d/templates/task.orgcaptmpl"))
                                    ("a" "Appt" entry (file+datetree "~/vc-docs/scratch.org")
                                     (file "~/.spacemacs.d/templates/appt.orgcaptmpl"))))

      (setq rspec-command-options nil
            js-indent-level       2
            js2-basic-offset      2)

      (org-babel-do-load-languages
       'org-babel-load-languages '((ruby       . t)
                                   (groovy     . t)
                                   (shell      . t)
                                   (emacs-lisp . t)))

      (setq twittering-icon-mode t
            twittering-use-master-password t)

      (setq org-present-text-scale 12)
      (spacemacs/declare-prefix-for-mode 'org-present-mode "mp" "presenting" "presentation")
      (spacemacs/set-leader-keys-for-minor-mode 'org-present-mode
        "ptc" 'org-present-cursor-toggle
        "pte" 'org-present-edit-toggle
        "px"  'org-present-execute-slide)

      (add-to-list 'auto-mode-alist '("Jenkinsfile" . groovy-mode))
      (spacemacs/declare-prefix-for-mode 'groovy-mode "mi" "import")
      (spacemacs/set-leader-keys-for-major-mode 'groovy-mode
        "id" 'groovy-imports-add-import-dwim)

      (spacemacs/declare-prefix-for-mode 'dockerfile-mode "mb" "build")
      (spacemacs/set-leader-keys-for-major-mode 'dockerfile-mode
        "bb" 'dockerfile-build-buffer)

      (spacemacs/set-leader-keys
        "&"   'async-shell-command
        "Dm"  'docker-machines
        "oo"  'cas/openstack
        "or"  'jump-to-register
        "ot"  'twittering-update-status-from-pop-up-buffer
        "aoa" 'org-agenda-and-todos
        "asm" 'multiterm-pop-to-insert-mode
        "fE"  'sudo-open-file
        "ok"  'tramp-cleanup-all-buffers)
     #+END_SRC
*** ~/.spacemacs.d/init.el
    This file is too big for the README, so I include it in version control independently. I just need to copy it to the right place.
    #+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/init.el :export none :noweb yes
      ;; -*- mode: emacs-lisp -*-
      ;; This file is loaded by Spacemacs at startup.
      ;; It must be stored in your home directory.

      (defun dotspacemacs/layers ()
        "Configuration Layers declaration.
      You should not put any user code in this function besides modifying the variable
      values."
        (setq-default
         ;; Base distribution to use. This is a layer contained in the directory
         ;; `+distribution'. For now available distributions are `spacemacs-base'
         ;; or `spacemacs'. (default 'spacemacs)
         dotspacemacs-distribution 'spacemacs
         ;; Lazy installation of layers (i.e. layers are installed only when a file
         ;; with a supported type is opened). Possible values are `all', `unused'
         ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
         ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
         ;; lazy install any layer that support lazy installation even the layers
         ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
         ;; installation feature and you have to explicitly list a layer in the
         ;; variable `dotspacemacs-configuration-layers' to install it.
         ;; (default 'unused)
         dotspacemacs-enable-lazy-installation 'unused
         ;; If non-nil then Spacemacs will ask for confirmation before installing
         ;; a layer lazily. (default t)
         dotspacemacs-ask-for-lazy-installation t
         ;; If non-nil layers with lazy install support are lazy installed.
         ;; List of additional paths where to look for configuration layers.
         ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
         dotspacemacs-configuration-layer-path '("~/.spacemacs.d/layers")
         ;; List of configuration layers to load.
         dotspacemacs-configuration-layers
         '(
           ;; ----------------------------------------------------------------
           ;; Example of useful layers you may want to use right away.
           ;; Uncomment some layer names and press <SPC f e R> (Vim style) or
           ;; <M-m f e R> (Emacs style) to install them.
           ;; ----------------------------------------------------------------
           auto-completion
           better-defaults
           command-log
           docker
           emacs-lisp
           git
           gnus
           groovy
           helm
           markdown
           org
           osx
           ranger
           (ruby :variables
                 ruby-test-runner 'rspec
                 ruby-version-manager 'rbenv)
           (shell :variables
                  shell-default-height 50
                  shell-default-shell 'shell)
           syntax-checking
           twitter
           vinegar
           yaml
           )
         ;; List of additional packages that will be installed without being
         ;; wrapped in a layer. If you need some configuration for these
         ;; packages, then consider creating a layer. You can also put the
         ;; configuration in `dotspacemacs/user-config'.
         dotspacemacs-additional-packages '(ample-theme
                                            copy-as-format
                                            feature-mode
                                            gist
                                            groovy-imports
                                            hackernews
                                            vdiff
                                            yard-mode)
         ;; A list of packages that cannot be updated.
         dotspacemacs-frozen-packages '()
         ;; A list of packages that will not be installed and loaded.
         dotspacemacs-excluded-packages '(lorem-ipsum
                                          desktop
                                          fancy-battery
                                          smeargle
                                          google-translate
                                          helm-themes
                                          golden-ratio
                                          hungry-delete
                                          leuven-theme
                                          open-junk-file
                                          neotree
                                          linum-relative
                                          pcre2el
                                          rvm
                                          chruby
                                          vi-tilde-fringe)
         ;; Defines the behaviour of Spacemacs when installing packages.
         ;; Possible values are `used-only', `used-but-keep-unused' and `all'.
         ;; `used-only' installs only explicitly used packages and uninstall any
         ;; unused packages as well as their unused dependencies.
         ;; `used-but-keep-unused' installs only the used packages but won't uninstall
         ;; them if they become unused. `all' installs *all* packages supported by
         ;; Spacemacs and never uninstall them. (default is `used-only')
         dotspacemacs-install-packages 'used-only))

      (defun dotspacemacs/init ()
        "Initialization function.
      This function is called at the very startup of Spacemacs initialization
      before layers configuration.
      You should not put any user code in there besides modifying the variable
      values."
        ;; This setq-default sexp is an exhaustive list of all the supported
        ;; spacemacs settings.
        (setq-default
         ;; If non-nil ELPA repositories are contacted via HTTPS whenever it's
         ;; possible. Set it to nil if you have no way to use HTTPS in your
         ;; environment, otherwise it is strongly recommended to let it set to t.
         ;; This variable has no effect if Emacs is launched with the parameter
         ;; `--insecure' which forces the value of this variable to nil.
         ;; (default t)
         dotspacemacs-elpa-https t
         ;; Maximum allowed time in seconds to contact an ELPA repository.
         dotspacemacs-elpa-timeout 5
         ;; If non-nil then spacemacs will check for updates at startup
         ;; when the current branch is not `develop'. Note that checking for
         ;; new versions works via git commands, thus it calls GitHub services
         ;; whenever you start Emacs. (default nil)
         dotspacemacs-check-for-update nil
         ;; If non-nil, a form that evaluates to a package directory. For example, to
         ;; use different package directories for different Emacs versions, set this
         ;; to `emacs-version'.
         dotspacemacs-elpa-subdirectory nil
         ;; One of `vim', `emacs' or `hybrid'.
         ;; `hybrid' is like `vim' except that `insert state' is replaced by the
         ;; `hybrid state' with `emacs' key bindings. The value can also be a list
         ;; with `:variables' keyword (similar to layers). Check the editing styles
         ;; section of the documentation for details on available variables.
         ;; (default 'vim)
         dotspacemacs-editing-style 'hybrid
         ;; If non nil output loading progress in `*Messages*' buffer. (default nil)
         dotspacemacs-verbose-loading nil
         ;; Specify the startup banner. Default value is `official', it displays
         ;; the official spacemacs logo. An integer value is the index of text
         ;; banner, `random' chooses a random text banner in `core/banners'
         ;; directory. A string value must be a path to an image format supported
         ;; by your Emacs build.
         ;; If the value is nil then no banner is displayed. (default 'official)
         dotspacemacs-startup-banner 999
         ;; List of items to show in startup buffer or an association list of
         ;; the form `(list-type . list-size)`. If nil then it is disabled.
         ;; Possible values for list-type are:
         ;; `recents' `bookmarks' `projects' `agenda' `todos'."
         ;; List sizes may be nil, in which case
         ;; `spacemacs-buffer-startup-lists-length' takes effect.
         dotspacemacs-startup-lists '((agenda . 5)
                                      (todos . 5))
         ;; True if the home buffer should respond to resize events.
         dotspacemacs-startup-buffer-responsive t
         ;; Default major mode of the scratch buffer (default `text-mode')
         dotspacemacs-scratch-mode 'text-mode
         ;; List of themes, the first of the list is loaded when spacemacs starts.
         ;; Press <SPC> T n to cycle to the next theme in the list (works great
         ;; with 2 themes variants, one dark and one light)
         dotspacemacs-themes '(ample)
         ;; If non nil the cursor color matches the state color in GUI Emacs.
         dotspacemacs-colorize-cursor-according-to-state t
         ;; Default font, or prioritized list of fonts. `powerline-scale' allows to
         ;; quickly tweak the mode-line size to make separators look not too crappy.
         dotspacemacs-default-font '("Droid Sans Mono"
                                     :size 11
                                     :weight normal
                                     :width normal
                                     :powerline-scale 1.1)
         ;; The leader key
         dotspacemacs-leader-key "SPC"
         ;; The key used for Emacs commands (M-x) (after pressing on the leader key).
         ;; (default "SPC")
         dotspacemacs-emacs-command-key "SPC"
         ;; The key used for Vim Ex commands (default ":")
         dotspacemacs-ex-command-key ":"
         ;; The leader key accessible in `emacs state' and `insert state'
         ;; (default "M-m")
         dotspacemacs-emacs-leader-key "M-m"
         ;; Major mode leader key is a shortcut key which is the equivalent of
         ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
         dotspacemacs-major-mode-leader-key ","
         ;; Major mode leader key accessible in `emacs state' and `insert state'.
         ;; (default "C-M-m")
         dotspacemacs-major-mode-emacs-leader-key "C-M-m"
         ;; These variables control whether separate commands are bound in the GUI to
         ;; the key pairs C-i, TAB and C-m, RET.
         ;; Setting it to a non-nil value, allows for separate commands under <C-i>
         ;; and TAB or <C-m> and RET.
         ;; In the terminal, these pairs are generally indistinguishable, so this only
         ;; works in the GUI. (default nil)
         dotspacemacs-distinguish-gui-tab nil
         ;; If non-nil `Y' is remapped to `y$' in Evil states. (default nil)
         dotspacemacs-remap-Y-to-y$ nil
         ;; If non-nil, the shift mappings `<' and `>' retain visual state if used
         ;; there. (default t)
         dotspacemacs-retain-visual-state-on-shift t
         ;; If non-nil, J and K move lines up and down when in visual mode.
         ;; (default nil)
         dotspacemacs-visual-line-move-text nil
         ;; If non-nil, inverse the meaning of `g' in `:substitute' Evil ex-command.
         ;; (default nil)
         dotspacemacs-ex-substitute-global nil
         ;; Name of the default layout (default "Default")
         dotspacemacs-default-layout-name "Default"
         ;; If non-nil the default layout name is displayed in the mode-line.
         ;; (default nil)
         dotspacemacs-display-default-layout nil
         ;; If non-nil then the last auto saved layouts are resume automatically upon
         ;; start. (default nil)
         dotspacemacs-auto-resume-layouts nil
         ;; Size (in MB) above which spacemacs will prompt to open the large file
         ;; literally to avoid performance issues. Opening a file literally means that
         ;; no major mode or minor modes are active. (default is 1)
         dotspacemacs-large-file-size 1
         ;; Location where to auto-save files. Possible values are `original' to
         ;; auto-save the file in-place, `cache' to auto-save the file to another
         ;; file stored in the cache directory and `nil' to disable auto-saving.
         ;; (default 'cache)
         dotspacemacs-auto-save-file-location 'cache
         ;; Maximum number of rollback slots to keep in the cache. (default 5)
         dotspacemacs-max-rollback-slots 5
         ;; If non-nil, `helm' will try to minimize the space it uses. (default nil)
         dotspacemacs-helm-resize nil
         ;; if non-nil, the helm header is hidden when there is only one source.
         ;; (default nil)
         dotspacemacs-helm-no-header nil
         ;; define the position to display `helm', options are `bottom', `top',
         ;; `left', or `right'. (default 'bottom)
         dotspacemacs-helm-position 'bottom
         ;; Controls fuzzy matching in helm. If set to `always', force fuzzy matching
         ;; in all non-asynchronous sources. If set to `source', preserve individual
         ;; source settings. Else, disable fuzzy matching in all sources.
         ;; (default 'always)
         dotspacemacs-helm-use-fuzzy 'always
         ;; If non-nil the paste micro-state is enabled. When enabled pressing `p`
         ;; several times cycle between the kill ring content. (default nil)
         dotspacemacs-enable-paste-transient-state nil
         ;; Which-key delay in seconds. The which-key buffer is the popup listing
         ;; the commands bound to the current keystroke sequence. (default 0.4)
         dotspacemacs-which-key-delay 0.4
         ;; Which-key frame position. Possible values are `right', `bottom' and
         ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
         ;; right; if there is insufficient space it displays it at the bottom.
         ;; (default 'bottom)
         dotspacemacs-which-key-position 'bottom
         ;; Control where `switch-to-buffer' displays the buffer. If nil,
         ;; `switch-to-buffer' displays the buffer in the current window even if
         ;; another same-purpose window is available. If non-nil, `switch-to-buffer'
         ;; displays the buffer in a same-purpose window even if the buffer can be
         ;; displayed in the current window. (default nil)
         dotspacemacs-switch-to-buffer-prefers-purpose nil
         ;; If non-nil a progress bar is displayed when spacemacs is loading. This
         ;; may increase the boot time on some systems and emacs builds, set it to
         ;; nil to boost the loading time. (default t)
         dotspacemacs-loading-progress-bar nil
         ;; If non nil the frame is fullscreen when Emacs starts up. (default nil)
         ;; (Emacs 24.4+ only)
         dotspacemacs-fullscreen-at-startup nil
         ;; If non-nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
         ;; Use to disable fullscreen animations in OSX. (default nil)
         dotspacemacs-fullscreen-use-non-native nil
         ;; If non-nil the frame is maximized when Emacs starts up.
         ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
         ;; (default nil) (Emacs 24.4+ only)
         dotspacemacs-maximized-at-startup t
         ;; A value from the range (0..100), in increasing opacity, which describes
         ;; the transparency level of a frame when it's active or selected.
         ;; Transparency can be toggled through `toggle-transparency'. (default 90)
         dotspacemacs-active-transparency 90
         ;; A value from the range (0..100), in increasing opacity, which describes
         ;; the transparency level of a frame when it's inactive or deselected.
         ;; Transparency can be toggled through `toggle-transparency'. (default 90)
         dotspacemacs-inactive-transparency 90
         ;; If non-nil show the titles of transient states. (default t)
         dotspacemacs-show-transient-state-title t
         ;; If non-nil show the color guide hint for transient state keys. (default t)
         dotspacemacs-show-transient-state-color-guide t
         ;; If non-nil unicode symbols are displayed in the mode line. (default t)
         dotspacemacs-mode-line-unicode-symbols t
         ;; If non-nil smooth scrolling (native-scrolling) is enabled. Smooth
         ;; scrolling overrides the default behavior of Emacs which recenters point
         ;; when it reaches the top or bottom of the screen. (default t)
         dotspacemacs-smooth-scrolling t
         ;; If non-nil line numbers are turned on in all `prog-mode' and `text-mode'
         ;; derivatives. If set to `relative', also turns on relative line numbers.
         ;; (default nil)
         dotspacemacs-line-numbers nil
         ;; Code folding method. Possible values are `evil' and `origami'.
         ;; (default 'evil)
         dotspacemacs-folding-method 'evil
         ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
         ;; (default nil)
         dotspacemacs-smartparens-strict-mode nil
         ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
         ;; over any automatically added closing parenthesis, bracket, quote, etc…
         ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
         dotspacemacs-smart-closing-parenthesis nil
         ;; Select a scope to highlight delimiters. Possible values are `any',
         ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
         ;; emphasis the current one). (default 'all)
         dotspacemacs-highlight-delimiters 'all
         ;; If non-nil, advise quit functions to keep server open when quitting.
         ;; (default nil)
         dotspacemacs-persistent-server nil
         ;; List of search tool executable names. Spacemacs uses the first installed
         ;; tool of the list. Supported tools are `rg', `ag', `pt', `ack' and `grep'.
         ;; (default '("rg" "ag" "pt" "ack" "grep"))
         dotspacemacs-search-tools '("ag")
         ;; The default package repository used if no explicit repository has been
         ;; specified with an installed package.
         ;; Not used for now. (default nil)
         dotspacemacs-default-package-repository nil
         ;; Delete whitespace while saving buffer. Possible values are `all'
         ;; to aggressively delete empty line and long sequences of whitespace,
         ;; `trailing' to delete only the whitespace at end of lines, `changed'to
         ;; delete only whitespace for changed lines or `nil' to disable cleanup.
         ;; (default nil)
         dotspacemacs-whitespace-cleanup 'trailing
         ))

      (defun dotspacemacs/user-init ()
        "Initialization function for user code.
      It is called immediately after `dotspacemacs/init', before layer configuration
      executes.
       This function is mostly useful for variables that need to be set
      before packages are loaded. If you are unsure, you should try in setting them in
      `dotspacemacs/user-config' first."
        )

      (defun dotspacemacs/user-config ()
        "Configuration function for user code.
      This function is called at the very end of Spacemacs initialization after
      layers configuration.
      This is the place where most of your configurations should be done. Unless it is
      explicitly specified that a variable should be set before a package is loaded,
      you should place your code here."
        (load "~/vc-docs/defs.el")
        (load "~/.spacemacs.d/dotfuns.el")
        (load "~/.spacemacs.d/dotsetup.el"))

      ;; Do not write anything past this comment. This is where Emacs will
      ;; auto-generate custom variable definitions.
      (defun dotspacemacs/emacs-custom-settings ()
        "Emacs custom settings.
      This is an auto-generated function, do not modify its content directly, use
      Emacs customize menu instead.
      This function is called at the very end of Spacemacs initialization."
      (custom-set-variables
       ;; custom-set-variables was added by Custom.
       ;; If you edit it by hand, you could mess it up, so be careful.
       ;; Your init file should contain only one such instance.
       ;; If there is more than one, they won't work right.
       '(custom-safe-themes
         (quote
          ("ad950f1b1bf65682e390f3547d479fd35d8c66cafa2b8aa28179d78122faa947" "4ab95b35f7720043592b49d890003874aa1954a3cf299edde13657c6a9182d85" "5d0e08476cdbee257cec52d48d1d19950049ff93a398c3ceacbcd6981c517694" default)))
       '(evil-want-Y-yank-to-eol nil))
      (custom-set-faces
       ;; custom-set-faces was added by Custom.
       ;; If you edit it by hand, you could mess it up, so be careful.
       ;; Your init file should contain only one such instance.
       ;; If there is more than one, they won't work right.
       )
      )
    #+END_SRC
*** ~/.spacemacs.d/templates
**** appt
     The =appt= template captures meetings, events, etc. It is not a =TODO= and does not have a deadline.
     #+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/templates/appt.orgcaptmpl :export none :noweb yes :comments no
       * %^{Summary} %^g
       %^{When}t
       %?
     #+END_SRC
**** note
     The =note= template captures ideas, reference material, code snippets, etc. It is not a =TODO= and does not have a deadline.
     #+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/templates/note.orgcaptmpl :export none :noweb yes :comments no
       * %^{Summary} %^g
       %?
     #+END_SRC
**** task
     The =task= template captures a =TODO= with a deadline.
     #+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/templates/task.orgcaptmpl :export none :noweb yes :comments no
       * TODO [#%^{priority|A|B|C}] %^{Summary} %^g
       DEADLINE: %^{Due}t
       %?
     #+END_SRC
**** todo
     The =todo= template captures a =TODO= without a deadline.
     #+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs.d/templates/todo.orgcaptmpl :export none :noweb yes :comments no
       * TODO [#%^{priority|A|B|C}] %^{Summary} %^g
       %?
     #+END_SRC
