#+TITLE: Machine configuration
#+AUTHOR: Johnson Denen
#+BABEL: :cache yes
#+PROPERTY: header-args :export none :results silent

To configure the machine using this file, run:
#+BEGIN_SRC emacs-lisp :export none
  (org-babel-tangle)
#+END_SRC
* .bash_profile
  The =.bash_profile= sources =.bashrc= to ensure macOS works as expected.
  #+BEGIN_SRC sh :tangle ~/.bash_profile
    #!/usr/bin/env bash

    source ~/.bashrc
  #+END_SRC
* .bashrc
  #+BEGIN_SRC sh :tangle ~/.bashrc
    #!/usr/bin/env bash

    alias d=docker
    alias g=git
    alias k=kubectl
    alias m=minikube
    alias tf=terraform
    alias ls='ls -alF'
    alias m-start='minikube start --memory 12288'

    source /usr/local/etc/profile.d/z.sh
    source $HOME/.asdf/asdf.sh
    source $HOME/.asdf/completions/asdf.bash

    source ~/.sdkman/bin/sdkman-init.sh

    export PATH=$PATH:~/bin:~/code/team-configs/bin
    export KUBECONFIG=~/.kube/kubeconfig
  #+END_SRC
* .gitignore
  Setup a default ignore list to be pointed to in =~/.gitconfig=.
  #+BEGIN_SRC conf :tangle ~/.gitignore
    .DS_Store
    .elixir_ls/
  #+END_SRC
* .gitconfig
  #+BEGIN_SRC conf :tangle ~/.gitconfig
    [user]
    name = Johnson Denen
    email = johnson.denen@gmail.com

    [alias]
    log = log --graph

    [color]
    ui = true

    [diff]
    renames = true

    [fetch]
    prune = true

    [pull]
    rebase = true

    [push]
    default = simple
    ff = false

    [rerere]
    enabled = true

    [core]
    excludesfile = ~/.gitignore
  #+END_SRC
* emacs
** autosave
   #+NAME: autosave
   #+BEGIN_SRC emacs-lisp
     (defun save-if-buffer-name ()
       (when buffer-file-name (save-buffer)))

     (add-hook 'window-configuration-change-hook 'save-if-buffer-name)
     (add-hook 'focus-out-hook (lambda () (evil-write-all nil)))

     (defadvice evil-window-left (before evil-window-left-now activate) (save-if-buffer-name))
     (defadvice evil-window-right (before evil-window-right-now activate) (save-if-buffer-name))
     (defadvice evil-window-up (before evil-window-up-now activate) (save-if-buffer-name))
     (defadvice evil-window-down (before evil-window-down-now activate) (save-if-buffer-name))
     (defadvice switch-to-buffer (before switch-to-buffer-now activate) (save-if-buffer-name))
     (defadvice other-window (before other-window-now activate) (save-if-buffer-name))
     (defadvice ace-window (before ace-window-now activate) (save-if-buffer-name))
   #+END_SRC
** chrome
   #+NAME: chrome
   #+BEGIN_SRC emacs-lisp
     (use-package atomic-chrome
       :init
       (atomic-chrome-start-server))
   #+END_SRC
** elixir
   Here's a convenience function for creating a new =mix= project.
   #+NAME: mix-new
   #+BEGIN_SRC emacs-lisp
     (defun mix-new ()
       (interactive)
       (let* ((project (read-string "Project name: "))
              (cmd (format "mix new %s" project)))
         (compile cmd)))
   #+END_SRC

   I'm experimenting with =lsp-mode= and =elixir_ls=.
   #+NAME: elixir-ls
   #+BEGIN_SRC emacs-lisp
     (use-package lsp-mode
       :commands lsp
       :ensure t
       :diminish lsp-mode
       :hook
       (elixir-mode . lsp)
       :init
       (add-to-list 'exec-path "/Users/johnson/.elixir/release"))

     (defun my/elixir-format ()
       (when (eq major-mode 'elixir-mode)
         (elixir-format)))

     (add-hook 'before-save-hook 'my/elixir-format)
   #+END_SRC
** mastodon
   I maintain [[https://github.com/jdenen/mastodon.el.git][mastodon.el]], the Emacs client for [[https://mastodon.social][Mastodon]], so I'll always want to use
   my local development version.
   #+NAME: mastodon
   #+BEGIN_SRC emacs-lisp
     (use-package mastodon
       :load-path "~/code/mastodon.el/lisp"
       :config
       (mastodon-discover))
   #+END_SRC
** miscellaneous
   A little about me:
   #+NAME: user_info
   #+BEGIN_SRC emacs-lisp
     (setq user-full-name    "Johnson Denen"
           user-mail-address "johnson.denen@gmail.com")
   #+END_SRC

   Some random configuration:
   #+NAME: misc
   #+BEGIN_SRC emacs-lisp
     (golden-ratio-mode)
     (exec-path-from-shell-initialize)
     (setq forge-topic-list-limit '(60 . 0))
     (add-hook 'prog-mode-hook
               (lambda ()
                 (push '(">=" . ?\u2265) prettify-symbols-alist)
                 (push '("<=" . ?\u2264) prettify-symbols-alist)
                 (push '("!=" . ?\u2260) prettify-symbols-alist)
                 (push '("==" . ?\u2A75) prettify-symbols-alist)
                 (push '("=~" . ?\u2245) prettify-symbols-alist)
                 (push '("<-" . ?\u2190) prettify-symbols-alist)
                 (push '("->" . ?\u2192) prettify-symbols-alist)
                 (push '("<-" . ?\u2190) prettify-symbols-alist)
                 (push '("fn" . ?\u03BB) prettify-symbols-alist)
                 (push '("|>" . ?\u25B7) prettify-symbols-alist)))
   #+END_SRC
** org
*** agenda
    #+NAME: org_agenda
    #+BEGIN_SRC emacs-lisp
      (require 'org-habit)
      (defun org-agenda-and-todos ()
        "Show `org-agenda' with a list of TODOs."
        (interactive)
        (org-agenda nil "c"))
      (spacemacs/set-leader-keys "aoa" 'org-agenda-and-todos)
      (setq org-agenda-start-with-log-mode     t
            org-agenda-use-time-grid           t
            org-agenda-include-diary           t
            diary-file                         "~/Notes/appointments"
            org-agenda-time-grid               '((daily today required-time)
                                                 (800 1200 1600 2000) " ....." "----")
            org-agenda-files                   '("~/Notes/thoughts.org"))
      (setq org-agenda-custom-commands
            '(("c" "Custom"
               ((tags-todo "oasis|pillar/!TODO" ((org-agenda-overriding-header "Work:")))
                (tags-todo "-oasis-pillar/!TODO" ((org-agenda-overriding-header "Not Work:")))
                (agenda "" ((org-agenda-span 'week)
                            (org-agenda-overriding-header " ")
                            (org-agenda-skip-deadline-if-done t)
                            (org-deadline-warning-days 7)))
                (tags-todo "/!BLKG" ((org-agenda-overriding-header "Ice box:")))))))
    #+END_SRC
*** babel
    #+NAME: org_babel
    #+BEGIN_SRC emacs-lisp
      (org-babel-do-load-languages
       'org-babel-load-languages '((shell . t)
                                   (emacs-lisp . t)))
    #+END_SRC
*** capture
    #+NAME: org_capture
    #+BEGIN_SRC emacs-lisp
      (setq org-log-done   'time
            org-log-refile 'time
            org-lowest-priority ?F
            org-default-priority ?F
            org-todo-keywords
            '((sequence "TODO(t)" "|" "DONE(d)" "CNCL(c)")
              (sequence "BKLG(b)" "|"))
            org-capture-templates
            '(("c" "Quick capture" entry
               (file+olp+datetree "~/Notes/thoughts.org")
               (file "~/.emacs.d/reminder.orgcaptmpl"))
              ("d" "Deadline" entry
               (file+olp+datetree "~/Notes/thoughts.org")
               (file "~/.emacs.d/deadline.orgcaptmpl"))
              ("j" "Jira")
              ("jc" "Card" entry
               (file+olp+datetree "~/Notes/thoughts.org")
               (file "~/.emacs.d/jira.orgcaptmpl"))
              ("jg" "Grooming" entry
               (file+olp+datetree "~/Notes/thoughts.org")
               (file "~/.emacs.d/groom.orgcaptmpl"))))
    #+END_SRC
**** Templates
     Quickly capture a todo:
     #+BEGIN_SRC text :tangle ~/.emacs.d/reminder.orgcaptmpl
       * TODO %(let* ((input (upcase (read-string "Priority [A-E]: "))) (priority (string-trim input))) (if (string-empty-p priority) "" (format " [#%s]" priority))) %^{Summary} %^g
     #+END_SRC
     Quickly capture a deadline:
     #+BEGIN_SRC text :tangle ~/.emacs.d/deadline.orgcaptmpl
       * %^{Summary} %^g
         DEADLINE: %^{Deadline}t
     #+END_SRC
     Capture a single Jira card:
     #+BEGIN_SRC text :tangle ~/.emacs.d/jira.orgcaptmpl
       * TODO [#C] %^{Summary} :oasis:jira:%^g
        :PROPERTIES:
        :Type: %^{Type|Story|Spike|Epic}
        :Epic:
        :Size:
        :END:
       ** Acceptance criteria
         - %?
       ** Technical notes
     #+END_SRC
     Capture a grooming session:
     #+BEGIN_SRC text :tangle ~/.emacs.d/groom.orgcaptmpl
       * TODO [#A] %^{Epic} grooming :oasis:groom:
       ** %^{Card summary}
         :PROPERTIES:
         :Type: %^{Type|Story|Spike}
         :Epic: %\1
         :Size:
         :END:
       *** Acceptance criteria
          - %?
       ** Title
         :PROPERTIES:
         :Type:
         :Epic: %\1
         :Size:
         :END:
       *** Acceptance criteria
          -
       ** Title
         :PROPERTIES:
         :Type:
         :Epic: %\1
         :Size:
         :END:
       *** Acceptance criteria
          -
       ** Title
         :PROPERTIES:
         :Type:
         :Epic: %\1
         :Size:
         :END:
       *** Acceptance criteria
          -
       ** Title
         :PROPERTIES:
         :Type:
         :Epic: %\1
         :Size:
         :END:
       *** Acceptance criteria
          -
     #+END_SRC
*** rss
    #+BEGIN_SRC org :tangle ~/.rss.org
      * Blogs                                                              :elfeed:
      ** Entertainment                                                          :e:
      *** https://usesthis.com/feed.atom
      ** Software Development
      *** Computer Science                                                     :cs:
      **** https://blog.acolyer.org/feed/
      *** DevOps                                                              :ops:
      *** Elixir                                                               :ex:
      **** https://elixirstatus.com/rss
      *** Emacs                                                                :el:
      **** http://planet.emacsen.org/atom.xml
    #+END_SRC
** packages
   Install some non-layered packages.
   #+NAME: extra_packages
   #+BEGIN_SRC emacs-lisp
     '(ample-theme
       atomic-chrome
       cask
       cheat-sh
       discover
       eglot
       el-mock
       emojify
       exec-path-from-shell
       emojify
       forge
       package-lint)
   #+END_SRC
* spacemacs
  Configure [[https://github.com/syl20bnr/spacemacs.git][Spacemacs]] using a bunch of the Emacs configuration above.
  #+BEGIN_SRC emacs-lisp :tangle ~/.spacemacs :noweb yes
    ;; -*- mode: emacs-lisp -*-
    ;; This file is loaded by Spacemacs at startup.
    ;; It must be stored in your home directory.

    (defun dotspacemacs/layers ()
      "Layer configuration:
    This function should only modify configuration layer settings."
      (setq-default
       ;; Base distribution to use. This is a layer contained in the directory
       ;; `+distribution'. For now available distributions are `spacemacs-base'
       ;; or `spacemacs'. (default 'spacemacs)
       dotspacemacs-distribution 'spacemacs

       ;; Lazy installation of layers (i.e. layers are installed only when a file
       ;; with a supported type is opened). Possible values are `all', `unused'
       ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
       ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
       ;; lazy install any layer that support lazy installation even the layers
       ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
       ;; installation feature and you have to explicitly list a layer in the
       ;; variable `dotspacemacs-configuration-layers' to install it.
       ;; (default 'unused)
       dotspacemacs-enable-lazy-installation nil

       ;; If non-nil then Spacemacs will ask for confirmation before installing
       ;; a layer lazily. (default t)
       dotspacemacs-ask-for-lazy-installation t

       ;; If non-nil layers with lazy install support are lazy installed.
       ;; List of additional paths where to look for configuration layers.
       ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
       dotspacemacs-configuration-layer-path '()

       ;; List of configuration layers to load.
       dotspacemacs-configuration-layers
       '(
         ;; ----------------------------------------------------------------
         ;; Example of useful layers you may want to use right away.
         ;; Uncomment some layer names and press `SPC f e R' (Vim style) or
         ;; `M-m f e R' (Emacs style) to install them.
         ;; ----------------------------------------------------------------
         (auto-completion :variables
                          auto-completion-enable-snippets-in-popup t)
         better-defaults
         copy-as-format
         docker
         (elfeed :variables rmh-elfeed-org-files (list "~/.rss.org"))
         (elixir :packages (not alchemist))
         emacs-lisp
         evil-commentary
         git
         groovy
         helm
         lsp
         markdown
         (org :packages (not orgit org-present org-pomodoro org-plus-contrib) :variables org-enable-reveal-js-support t)
         osx
         search-engine
         shell
         (shell-scripts :packages (not fish-mode))
         syntax-checking
         terraform
         (vinegar :variables vinegar-reuse-dired-buffer t)
         yaml
         )

       ;; List of additional packages that will be installed without being
       ;; wrapped in a layer. If you need some configuration for these
       ;; packages, then consider creating a layer. You can also put the
       ;; configuration in `dotspacemacs/user-config'.
       ;; To use a local version of a package, use the `:location' property:
       ;; '(your-package :location "~/path/to/your-package/")
       ;; Also include the dependencies as they will not be resolved automatically.
       dotspacemacs-additional-packages
       <<extra_packages>>

       ;; A list of packages that cannot be updated.
       dotspacemacs-frozen-packages '()

       ;; A list of packages that will not be installed and loaded.
       dotspacemacs-excluded-packages '()

       ;; Defines the behaviour of Spacemacs when installing packages.
       ;; Possible values are `used-only', `used-but-keep-unused' and `all'.
       ;; `used-only' installs only explicitly used packages and deletes any unused
       ;; packages as well as their unused dependencies. `used-but-keep-unused'
       ;; installs only the used packages but won't delete unused ones. `all'
       ;; installs *all* packages supported by Spacemacs and never uninstalls them.
       ;; (default is `used-only')
       dotspacemacs-install-packages 'used-only))

    (defun dotspacemacs/init ()
      "Initialization:
    This function is called at the very beginning of Spacemacs startup,
    before layer configuration.
    It should only modify the values of Spacemacs settings."
      ;; This setq-default sexp is an exhaustive list of all the supported
      ;; spacemacs settings.
      (setq-default
       ;; If non-nil ELPA repositories are contacted via HTTPS whenever it's
       ;; possible. Set it to nil if you have no way to use HTTPS in your
       ;; environment, otherwise it is strongly recommended to let it set to t.
       ;; This variable has no effect if Emacs is launched with the parameter
       ;; `--insecure' which forces the value of this variable to nil.
       ;; (default t)
       dotspacemacs-elpa-https t

       ;; Maximum allowed time in seconds to contact an ELPA repository.
       ;; (default 5)
       dotspacemacs-elpa-timeout 5

       ;; Set `gc-cons-threshold' and `gc-cons-percentage' when startup finishes.
       ;; This is an advanced option and should not be changed unless you suspect
       ;; performance issues due to garbage collection operations.
       ;; (default '(100000000 0.1))
       dotspacemacs-gc-cons '(100000000 0.1)

       ;; If non-nil then Spacelpa repository is the primary source to install
       ;; a locked version of packages. If nil then Spacemacs will install the
       ;; latest version of packages from MELPA. (default nil)
       dotspacemacs-use-spacelpa nil

       ;; If non-nil then verify the signature for downloaded Spacelpa archives.
       ;; (default nil)
       dotspacemacs-verify-spacelpa-archives nil

       ;; If non-nil then spacemacs will check for updates at startup
       ;; when the current branch is not `develop'. Note that checking for
       ;; new versions works via git commands, thus it calls GitHub services
       ;; whenever you start Emacs. (default nil)
       dotspacemacs-check-for-update nil

       ;; If non-nil, a form that evaluates to a package directory. For example, to
       ;; use different package directories for different Emacs versions, set this
       ;; to `emacs-version'. (default 'emacs-version)
       dotspacemacs-elpa-subdirectory 'emacs-version

       ;; One of `vim', `emacs' or `hybrid'.
       ;; `hybrid' is like `vim' except that `insert state' is replaced by the
       ;; `hybrid state' with `emacs' key bindings. The value can also be a list
       ;; with `:variables' keyword (similar to layers). Check the editing styles
       ;; section of the documentation for details on available variables.
       ;; (default 'vim)
       dotspacemacs-editing-style 'hybrid

       ;; If non-nil output loading progress in `*Messages*' buffer. (default nil)
       dotspacemacs-verbose-loading nil

       ;; Specify the startup banner. Default value is `official', it displays
       ;; the official spacemacs logo. An integer value is the index of text
       ;; banner, `random' chooses a random text banner in `core/banners'
       ;; directory. A string value must be a path to an image format supported
       ;; by your Emacs build.
       ;; If the value is nil then no banner is displayed. (default 'official)
       dotspacemacs-startup-banner 'official

       ;; List of items to show in startup buffer or an association list of
       ;; the form `(list-type . list-size)`. If nil then it is disabled.
       ;; Possible values for list-type are:
       ;; `recents' `bookmarks' `projects' `agenda' `todos'.
       ;; List sizes may be nil, in which case
       ;; `spacemacs-buffer-startup-lists-length' takes effect.
       dotspacemacs-startup-lists '((recents . 5)
                                    (projects . 7))

       ;; True if the home buffer should respond to resize events. (default t)
       dotspacemacs-startup-buffer-responsive t

       ;; Default major mode of the scratch buffer (default `text-mode')
       dotspacemacs-scratch-mode 'text-mode

       ;; Initial message in the scratch buffer, such as "Welcome to Spacemacs!"
       ;; (default nil)
       dotspacemacs-initial-scratch-message nil

       ;; List of themes, the first of the list is loaded when spacemacs starts.
       ;; Press `SPC T n' to cycle to the next theme in the list (works great
       ;; with 2 themes variants, one dark and one light)
       dotspacemacs-themes '(ample spacemacs-dark spacemacs-light)

       ;; Set the theme for the Spaceline. Supported themes are `spacemacs',
       ;; `all-the-icons', `custom', `vim-powerline' and `vanilla'. The first three
       ;; are spaceline themes. `vanilla' is default Emacs mode-line. `custom' is a
       ;; user defined themes, refer to the DOCUMENTATION.org for more info on how
       ;; to create your own spaceline theme. Value can be a symbol or list with\
       ;; additional properties.
       ;; (default '(spacemacs :separator wave :separator-scale 1.5))
       dotspacemacs-mode-line-theme '(spacemacs :separator wave :separator-scale 1.5)

       ;; If non-nil the cursor color matches the state color in GUI Emacs.
       ;; (default t)
       dotspacemacs-colorize-cursor-according-to-state t

       ;; Default font, or prioritized list of fonts. `powerline-scale' allows to
       ;; quickly tweak the mode-line size to make separators look not too crappy.
       dotspacemacs-default-font '("Source Code Pro"
                                   :size 14
                                   :weight normal
                                   :width normal)

       ;; The leader key (default "SPC")
       dotspacemacs-leader-key "SPC"

       ;; The key used for Emacs commands `M-x' (after pressing on the leader key).
       ;; (default "SPC")
       dotspacemacs-emacs-command-key "SPC"

       ;; The key used for Vim Ex commands (default ":")
       dotspacemacs-ex-command-key ":"

       ;; The leader key accessible in `emacs state' and `insert state'
       ;; (default "M-m")
       dotspacemacs-emacs-leader-key "M-m"

       ;; Major mode leader key is a shortcut key which is the equivalent of
       ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
       dotspacemacs-major-mode-leader-key ","

       ;; Major mode leader key accessible in `emacs state' and `insert state'.
       ;; (default "C-M-m")
       dotspacemacs-major-mode-emacs-leader-key "C-M-m"

       ;; These variables control whether separate commands are bound in the GUI to
       ;; the key pairs `C-i', `TAB' and `C-m', `RET'.
       ;; Setting it to a non-nil value, allows for separate commands under `C-i'
       ;; and TAB or `C-m' and `RET'.
       ;; In the terminal, these pairs are generally indistinguishable, so this only
       ;; works in the GUI. (default nil)
       dotspacemacs-distinguish-gui-tab nil

       ;; If non-nil `Y' is remapped to `y$' in Evil states. (default nil)
       dotspacemacs-remap-Y-to-y$ t

       ;; If non-nil, the shift mappings `<' and `>' retain visual state if used
       ;; there. (default t)
       dotspacemacs-retain-visual-state-on-shift t

       ;; If non-nil, `J' and `K' move lines up and down when in visual mode.
       ;; (default nil)
       dotspacemacs-visual-line-move-text nil

       ;; If non-nil, inverse the meaning of `g' in `:substitute' Evil ex-command.
       ;; (default nil)
       dotspacemacs-ex-substitute-global nil

       ;; Name of the default layout (default "Default")
       dotspacemacs-default-layout-name "Default"

       ;; If non-nil the default layout name is displayed in the mode-line.
       ;; (default nil)
       dotspacemacs-display-default-layout nil

       ;; If non-nil then the last auto saved layouts are resumed automatically upon
       ;; start. (default nil)
       dotspacemacs-auto-resume-layouts nil

       ;; If non-nil, auto-generate layout name when creating new layouts. Only has
       ;; effect when using the "jump to layout by number" commands. (default nil)
       dotspacemacs-auto-generate-layout-names nil

       ;; Size (in MB) above which spacemacs will prompt to open the large file
       ;; literally to avoid performance issues. Opening a file literally means that
       ;; no major mode or minor modes are active. (default is 1)
       dotspacemacs-large-file-size 1

       ;; Location where to auto-save files. Possible values are `original' to
       ;; auto-save the file in-place, `cache' to auto-save the file to another
       ;; file stored in the cache directory and `nil' to disable auto-saving.
       ;; (default 'cache)
       dotspacemacs-auto-save-file-location 'cache

       ;; Maximum number of rollback slots to keep in the cache. (default 5)
       dotspacemacs-max-rollback-slots 5

       ;; If non-nil, `helm' will try to minimize the space it uses. (default nil)
       dotspacemacs-helm-resize nil

       ;; if non-nil, the helm header is hidden when there is only one source.
       ;; (default nil)
       dotspacemacs-helm-no-header nil

       ;; define the position to display `helm', options are `bottom', `top',
       ;; `left', or `right'. (default 'bottom)
       dotspacemacs-helm-position 'bottom

       ;; Controls fuzzy matching in helm. If set to `always', force fuzzy matching
       ;; in all non-asynchronous sources. If set to `source', preserve individual
       ;; source settings. Else, disable fuzzy matching in all sources.
       ;; (default 'always)
       dotspacemacs-helm-use-fuzzy 'always

       ;; If non-nil, the paste transient-state is enabled. While enabled, pressing
       ;; `p' several times cycles through the elements in the `kill-ring'.
       ;; (default nil)
       dotspacemacs-enable-paste-transient-state t

       ;; Which-key delay in seconds. The which-key buffer is the popup listing
       ;; the commands bound to the current keystroke sequence. (default 0.4)
       dotspacemacs-which-key-delay 0.4

       ;; Which-key frame position. Possible values are `right', `bottom' and
       ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
       ;; right; if there is insufficient space it displays it at the bottom.
       ;; (default 'bottom)
       dotspacemacs-which-key-position 'bottom

       ;; Control where `switch-to-buffer' displays the buffer. If nil,
       ;; `switch-to-buffer' displays the buffer in the current window even if
       ;; another same-purpose window is available. If non-nil, `switch-to-buffer'
       ;; displays the buffer in a same-purpose window even if the buffer can be
       ;; displayed in the current window. (default nil)
       dotspacemacs-switch-to-buffer-prefers-purpose t

       ;; If non-nil a progress bar is displayed when spacemacs is loading. This
       ;; may increase the boot time on some systems and emacs builds, set it to
       ;; nil to boost the loading time. (default t)
       dotspacemacs-loading-progress-bar t

       ;; If non-nil the frame is fullscreen when Emacs starts up. (default nil)
       ;; (Emacs 24.4+ only)
       dotspacemacs-fullscreen-at-startup nil

       ;; If non-nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
       ;; Use to disable fullscreen animations in OSX. (default nil)
       dotspacemacs-fullscreen-use-non-native nil

       ;; If non-nil the frame is maximized when Emacs starts up.
       ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
       ;; (default nil) (Emacs 24.4+ only)
       dotspacemacs-maximized-at-startup nil

       ;; A value from the range (0..100), in increasing opacity, which describes
       ;; the transparency level of a frame when it's active or selected.
       ;; Transparency can be toggled through `toggle-transparency'. (default 90)
       dotspacemacs-active-transparency 90

       ;; A value from the range (0..100), in increasing opacity, which describes
       ;; the transparency level of a frame when it's inactive or deselected.
       ;; Transparency can be toggled through `toggle-transparency'. (default 90)
       dotspacemacs-inactive-transparency 90

       ;; If non-nil show the titles of transient states. (default t)
       dotspacemacs-show-transient-state-title t

       ;; If non-nil show the color guide hint for transient state keys. (default t)
       dotspacemacs-show-transient-state-color-guide t

       ;; If non-nil unicode symbols are displayed in the mode line. (default t)
       dotspacemacs-mode-line-unicode-symbols t

       ;; If non-nil smooth scrolling (native-scrolling) is enabled. Smooth
       ;; scrolling overrides the default behavior of Emacs which recenters point
       ;; when it reaches the top or bottom of the screen. (default t)
       dotspacemacs-smooth-scrolling t

       ;; Control line numbers activation.
       ;; If set to `t' or `relative' line numbers are turned on in all `prog-mode' and
       ;; `text-mode' derivatives. If set to `relative', line numbers are relative.
       ;; This variable can also be set to a property list for finer control:
       ;; '(:relative nil
       ;;   :disabled-for-modes dired-mode
       ;;                       doc-view-mode
       ;;                       markdown-mode
       ;;                       org-mode
       ;;                       pdf-view-mode
       ;;                       text-mode
       ;;   :size-limit-kb 1000)
       ;; (default nil)
       dotspacemacs-line-numbers nil

       ;; Code folding method. Possible values are `evil' and `origami'.
       ;; (default 'evil)
       dotspacemacs-folding-method 'evil

       ;; If non-nil `smartparens-strict-mode' will be enabled in programming modes.
       ;; (default nil)
       dotspacemacs-smartparens-strict-mode nil

       ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
       ;; over any automatically added closing parenthesis, bracket, quote, etc…
       ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
       dotspacemacs-smart-closing-parenthesis nil

       ;; Select a scope to highlight delimiters. Possible values are `any',
       ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
       ;; emphasis the current one). (default 'all)
       dotspacemacs-highlight-delimiters 'all

       ;; If non-nil, start an Emacs server if one is not already running.
       dotspacemacs-enable-server t

       ;; If non-nil, advise quit functions to keep server open when quitting.
       ;; (default nil)
       dotspacemacs-persistent-server t

       ;; List of search tool executable names. Spacemacs uses the first installed
       ;; tool of the list. Supported tools are `rg', `ag', `pt', `ack' and `grep'.
       ;; (default '("rg" "ag" "pt" "ack" "grep"))
       dotspacemacs-search-tools '("rg" "ag" "pt" "ack" "grep")

       ;; Format specification for setting the frame title.
       ;; %a - the `abbreviated-file-name', or `buffer-name'
       ;; %t - `projectile-project-name'
       ;; %I - `invocation-name'
       ;; %S - `system-name'
       ;; %U - contents of $USER
       ;; %b - buffer name
       ;; %f - visited file name
       ;; %F - frame name
       ;; %s - process status
       ;; %p - percent of buffer above top of window, or Top, Bot or All
       ;; %P - percent of buffer above bottom of window, perhaps plus Top, or Bot or All
       ;; %m - mode name
       ;; %n - Narrow if appropriate
       ;; %z - mnemonics of buffer, terminal, and keyboard coding systems
       ;; %Z - like %z, but including the end-of-line format
       ;; (default "%I@%S")
       dotspacemacs-frame-title-format "%I@%S"

       ;; Format specification for setting the icon title format
       ;; (default nil - same as frame-title-format)
       dotspacemacs-icon-title-format nil

       ;; Delete whitespace while saving buffer. Possible values are `all'
       ;; to aggressively delete empty line and long sequences of whitespace,
       ;; `trailing' to delete only the whitespace at end of lines, `changed' to
       ;; delete only whitespace for changed lines or `nil' to disable cleanup.
       ;; (default nil)
       dotspacemacs-whitespace-cleanup 'changed

       ;; Either nil or a number of seconds. If non-nil zone out after the specified
       ;; number of seconds. (default nil)
       dotspacemacs-zone-out-when-idle nil

       ;; Run `spacemacs/prettify-org-buffer' when
       ;; visiting README.org files of Spacemacs.
       ;; (default nil)
       dotspacemacs-pretty-docs nil))

    (defun dotspacemacs/user-init ()
      "Initialization for user code:
    This function is called immediately after `dotspacemacs/init', before layer
    configuration.
    It is mostly for variables that should be set before packages are loaded.
    If you are unsure, try setting them in `dotspacemacs/user-config' first."
      (global-prettify-symbols-mode))

    (defun dotspacemacs/user-config ()
      "Configuration for user code:
    This function is called at the very end of Spacemacs startup, after layer
    configuration.
    Put your configuration code here, except for variables that should be set
    before packages are loaded."
      <<user_info>>

      <<misc>>

      <<autosave>>

      <<chrome>>

      <<mastodon>>

      <<mix-keys>>

      <<mix-new>>

      <<elixir-ls>>

      <<org_agenda>>

      <<org_babel>>

      <<org_capture>>
      )

    ;; Do not write anything past this comment. This is where Emacs will
    ;; auto-generate custom variable definitions.
    (defun dotspacemacs/emacs-custom-settings ()
      "Emacs custom settings.
    This is an auto-generated function, do not modify its content directly, use
    Emacs customize menu instead.
    This function is called at the very end of Spacemacs initialization."
    (custom-set-variables
     ;; custom-set-variables was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     '(package-selected-packages
       (quote
        (yasnippet-snippets yapfify yaml-mode unfill smeargle ruby-tools ruby-test-mode ruby-refactor ruby-hash-syntax rubocop rspec-mode robe reveal-in-osx-finder rbenv rake pyvenv pytest pyenv-mode py-isort pippel pipenv pip-requirements pbcopy package-lint ox-reveal osx-trash osx-dictionary orgit org-projectile org-category-capture org-mime org-download org-brain ob-elixir mwim mmm-mode minitest markdown-toc markdown-mode magit-gitflow live-py-mode launchctl insert-shebang importmagic epc ctable concurrent deferred hy-mode dash-functional htmlize helm-pydoc helm-gitignore helm-company helm-c-yasnippet gnuplot gitignore-mode gitconfig-mode gitattributes-mode git-timemachine git-messenger git-link gh-md fuzzy flycheck-pos-tip pos-tip flycheck-mix flycheck-credo flycheck-bashate flycheck evil-org evil-magit magit git-commit ghub let-alist with-editor evil-commentary el-mock dockerfile-mode docker json-mode tablist magit-popup docker-tramp json-snatcher json-reformat cython-mode copy-as-format company-statistics company-shell company-anaconda chruby cask package-build shut-up bundler inf-ruby auto-yasnippet yasnippet atomic-chrome websocket anaconda-mode pythonic ample-theme alchemist company elixir-mode ac-ispell auto-complete ws-butler winum which-key volatile-highlights vi-tilde-fringe uuidgen use-package toc-org symon string-inflection spaceline-all-the-icons restart-emacs request rainbow-delimiters popwin persp-mode pcre2el password-generator paradox overseer org-plus-contrib org-bullets open-junk-file neotree nameless move-text macrostep lorem-ipsum linum-relative link-hint indent-guide hungry-delete hl-todo highlight-parentheses highlight-numbers highlight-indentation helm-xref helm-themes helm-swoop helm-purpose helm-projectile helm-mode-manager helm-make helm-flx helm-descbinds helm-ag google-translate golden-ratio font-lock+ flx-ido fill-column-indicator fancy-battery eyebrowse expand-region exec-path-from-shell evil-visualstar evil-visual-mark-mode evil-unimpaired evil-tutor evil-surround evil-search-highlight-persist evil-numbers evil-nerd-commenter evil-mc evil-matchit evil-lisp-state evil-lion evil-indent-plus evil-iedit-state evil-exchange evil-escape evil-ediff evil-cleverparens evil-args evil-anzu eval-sexp-fu elisp-slime-nav editorconfig dumb-jump diminish define-word counsel-projectile column-enforce-mode clean-aindent-mode centered-cursor-mode auto-highlight-symbol auto-compile aggressive-indent adaptive-wrap ace-window ace-link ace-jump-helm-line))))
    (custom-set-faces
     ;; custom-set-faces was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     )
    )
  #+END_SRC
