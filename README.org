#+TITLE: Machine configuration
#+AUTHOR: Johnson Denen
#+BABEL: :cache yes
#+PROPERTY: header-args :export none :results silent

This literate configuration file sets up a machine for Elixir development. Use
=(org-babel-tangle)= in this file in Emacs to propogate its configuration.

* asdf
  I use =asdf= to configure Erlang and Elixir versions. Versions can be specified both globally
  and on a per-project basis.

  This file does NOT install =asdf=. Manually run these commands to do so:

  #+BEGIN_SRC sh :export none
    git clone https://github.com/asdf-vm/asdf ~/.asdf
    cd ~/.asdf
    git checkout "$(git describe --abbrev=0 --tags)"
  #+END_SRC

  =asdf= requires this to be added to =.bashrc=:

  #+NAME: asdf-source
  #+BEGIN_SRC sh
    source $HOME/.asdf/asdf.sh
    source $HOME/.asdf/completions/asdf.bash
  #+END_SRC

  These are my current, default versions.

  #+BEGIN_SRC conf :tangle ~/.tool-versions
    erlang 22.2
    elixir 1.9.4
  #+END_SRC
* bash
  I often -- but not always -- work on macOS, so =.bash_profile= sources =.bashrc=.

  #+BEGIN_SRC sh :tangle ~/.bash_profile
    #!/usr/bin/env bash
    source $HOME/.bashrc
  #+END_SRC

  Most of my work is done in Emacs, so I try to keep =.bashrc= simple.

  #+BEGIN_SRC sh :tangle ~/.bashrc :noweb yes
    #!/usr/bin/env bash

    alias k=kubectl
    alias m=minikube
    alias tf=terraform
    alias ls='ls -alF'

    export KUBECONFIG=~/.kube/kubeconfig
    export PATH=$PATH:~/bin

    <<asdf-source>>
  #+END_SRC
* git
  Ignore =.DS_Store= files when I'm on macOS and all ElixirLS project directories.

  #+BEGIN_SRC conf :tangle ~/.gitignore
    .DS_Store
    .elixir_ls/
  #+END_SRC

  Rebase when I =git pull=, prune when I =git fetch=, and turn on =rerere=.

  #+BEGIN_SRC conf :tangle ~/.gitconfig
    [user]
    name = Johnson Denen
    email = johnson.denen@gmail.com

    [alias]
    log = log --graph

    [color]
    ui = true

    [diff]
    renames = true

    [fetch]
    prune = true

    [pull]
    rebase = true

    [push]
    default = simple
    ff = false

    [rerere]
    enabled = true

    [core]
    excludesfile = ~/.gitignore
  #+END_SRC
* emacs
** .spacemacs
   I'm trying to keep my =~/.spacemacs= file very vanilla. Most of my Emacs configuration
   is in custom layers. This results in fewer =.spacemacs= diffs and should make Spacemacs
   updates easier.

   This file does NOT install Spacemacs. Manually run these commands to do so:

   #+BEGIN_SRC sh :export none
     git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d
     cd ~/.emacs.d
     git checkout develop
     mkdir -p private/my-elixir
   #+END_SRC

** elixir
   This file does NOT install Erlang/Elixir. Manually run these commands to do so:

   #+BEGIN_SRC sh :export none
     asdf plugin-add erlang https://github.com/asdf-vm/asdf-erlang.git
     asdf install erlang 22.2
     asdf global erlang 22.2

     asdf plugin-add elixir https://github.com/asdf-vm/asdf-elixir.git
     asdf install elixir 1.9.4
     asdf global elixir 1.9.4
   #+END_SRC

   My =.spacemacs= configures =elixir-mode= to use =lsp= as its backend.

   This configuration file does NOT install elixir-ls and expects it to be installed
   at =~/.elixirls/release=. These simple commands should do it:

   #+BEGIN_SRC sh :export none
     git clone https://github.com/elixir-lsp/elixir-ls ~/.elixirls
     cd ~/.elixirls
     mix deps.get
     mix compile
     mix elixir_ls.release -o release
   #+END_SRC

   The =lsp= layer adds a ton of keybindings and options, but most of them aren't
   supported by the Elixir implementation. The layer also hides its buffer formatting
   function behind an otherwise-useless prefix key. I would prefer that prefix (===)
   run the formatter.

   #+NAME: lsp-kbd
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'elixir-mode
       (define-key spacemacs-lsp-mode-map (kbd "a") nil)
       (define-key spacemacs-lsp-mode-map (kbd "r") nil)
       (define-key spacemacs-lsp-mode-map (kbd "x") nil)
       (define-key spacemacs-lsp-mode-map (kbd "=") 'lsp-format-buffer))
   #+END_SRC

   =lsp-mode= watches files for changes by default, but it doesn't ignore all the right
   subdirectories for an Elixir project. I'll append what should be ignored to the default
   list so it continues to ignore =.git/=, etc.

   #+NAME: lsp-ignore
   #+BEGIN_SRC emacs-lisp
     (customize-push-and-save 'lsp-file-watch-ignored
                              '("deps/" "_build/" ".elixir_ls/"))
   #+END_SRC

   The rest of the my Elixir layer's =packages.el= file configures =exunit.el=, making unit
   tests easy to run. Test functions are hidden behind the =t= prefix. Use =SPC m t= or =, t=
   to access them.

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/private/my-elixir/packages.el :noweb yes
     (defconst my-elixir-packages
       '(exunit lsp-mode))

     (defun my-elixir/init-exunit ()
       (use-package exunit
         :config
         (exec-path-from-shell-initialize)
         (spacemacs/declare-prefix-for-mode 'elixir-mode "mt" "test" "mix test")
         (spacemacs/set-leader-keys-for-major-mode 'elixir-mode
           "ta" 'exunit-verify-all
           "tb" 'exunit-verify
           "tt" 'exunit-verify-single
           "tr" 'exunit-rerun
           "tu" 'exunit-verify-all-in-umbrella)))

     (defun my-elixir/post-init-lsp-mode ()
       (use-package lsp-mode
         :config
         <<lsp-kbd>>
         <<lsp-ignore>>))
   #+END_SRC

   I'm a big fan in =dialyzer=. Here are some functions to run it and present its output
   in the same way =exunit= does.

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/private/my-elixir/funcs.el
     (defun my-elixir/mix-do (task directory)
       (let ((default-directory directory))
         (exunit-do-compile (s-join " " `("mix" ,task)))))

     (defun my-elixir/dialyze-project ()
       (interactive)
       (my-elixir/mix-do "dialyzer" (exunit-project-root)))

     (defun my-elixir/dialyze-umbrella ()
       (interactive)
       (my-elixir/mix-do "dialyzer" (exunit-umbrella-project-root)))
   #+END_SRC

   The new functions need keybindings.

   #+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/private/my-elixir/keybindings.el
     (spacemacs/declare-prefix-for-mode 'elixir-mode "md" "dialyzer" "mix dialyzer")
     (spacemacs/set-leader-keys-for-major-mode 'elixir-mode
       "da" 'my-elixir/dialyze-project
       "du" 'my-elixir/dialyze-umbrella)
   #+END_SRC
** org
*** agenda
    #+NAME: org_agenda
    #+BEGIN_SRC emacs-lisp
      (require 'org-habit)
      (defun org-agenda-and-todos ()
        "Show `org-agenda' with a list of TODOs."
        (interactive)
        (org-agenda nil "c"))
      (spacemacs/set-leader-keys "aoa" 'org-agenda-and-todos)
      (setq org-agenda-start-with-log-mode     t
            org-agenda-use-time-grid           t
            org-agenda-include-diary           t
            diary-file                         "~/Notes/appointments"
            org-agenda-time-grid               '((daily today required-time)
                                                 (800 1200 1600 2000) " ....." "----")
            org-agenda-files                   '("~/Notes/thoughts.org"))
      (setq org-agenda-custom-commands
            '(("c" "Custom"
               ((tags-todo "oasis|pillar/!TODO" ((org-agenda-overriding-header "Work:")))
                (tags-todo "-oasis-pillar/!TODO" ((org-agenda-overriding-header "Not Work:")))
                (agenda "" ((org-agenda-span 'week)
                            (org-agenda-overriding-header " ")
                            (org-agenda-skip-deadline-if-done t)
                            (org-deadline-warning-days 7)))
                (tags-todo "/!BLKG" ((org-agenda-overriding-header "Ice box:")))))))
    #+END_SRC
*** babel
    #+NAME: org_babel
    #+BEGIN_SRC emacs-lisp
      (org-babel-do-load-languages
       'org-babel-load-languages '((shell . t)
                                   (emacs-lisp . t)
                                   (conf . t)))
    #+END_SRC
*** capture
    #+NAME: org_capture
    #+BEGIN_SRC emacs-lisp
      (setq org-log-done   'time
            org-log-refile 'time
            org-lowest-priority ?F
            org-default-priority ?F
            org-todo-keywords
            '((sequence "TODO(t)" "|" "DONE(d)" "CNCL(c)")
              (sequence "BKLG(b)" "|"))
            org-capture-templates
            '(("c" "Quick capture" entry
               (file+olp+datetree "~/Notes/thoughts.org")
               (file "~/.emacs.d/reminder.orgcaptmpl"))
              ("d" "Deadline" entry
               (file+olp+datetree "~/Notes/thoughts.org")
               (file "~/.emacs.d/deadline.orgcaptmpl"))
              ("n" "Note" entry
               (file+olp+datetree "~/Notes/thoughts.org")
               (file "~/.emacs.d/note.orgcaptmpl"))))
    #+END_SRC
**** Templates
     Quickly capture a todo:
     #+BEGIN_SRC text :tangle ~/.emacs.d/reminder.orgcaptmpl
       * TODO %(let* ((input (upcase (read-string "Priority [A-E]: "))) (priority (string-trim input))) (if (string-empty-p priority) "" (format "[#%s]" priority))) %^{Summary} %^g
     #+END_SRC
     Quickly capture a deadline:
     #+BEGIN_SRC text :tangle ~/.emacs.d/deadline.orgcaptmpl
       * %^{Summary} %^g
         DEADLINE: %^{Deadline}t
     #+END_SRC
     Quickly capture a note:
     #+BEGIN_SRC text :tangle ~/.emacs.d/note.orgcaptmpl
       * %^{Summary} %^g
       ** %?
     #+END_SRC
