#+TITLE: Emacs <> Elixir
#+STARTUP: inlineimages nofold

Literate configuration for my MacOS development environment.
+ [[https://ohmyz.sh][Oh My Zsh]]
+ Git with GPG signing
+ [[https://elixir-lang.org][Elixir]], Erlang, NodeJS, and [[https://postgres.app][Postgres]]
+ [[https://github.com/hlissner/doom-emacs][Doom]] Emacs using [[https://github.com/elixir-lsp/elixir-ls][ElixirLS]]

* Table of Contents :TOC_3:noexport:
- [[#usage][Usage]]
- [[#todos][TODOs]]
- [[#configuration][Configuration]]
  - [[#macos][MacOS]]
    - [[#package-management][Package management]]
    - [[#window-management][Window management]]
    - [[#terminal][Terminal]]
  - [[#git][Git]]
  - [[#asdf-vm][asdf-vm]]
    - [[#erlang][Erlang]]
    - [[#elixir][Elixir]]
    - [[#nodejs][NodeJS]]
    - [[#direnv][direnv]]
  - [[#doom][Doom]]
    - [[#editorconfig][EditorConfig]]
    - [[#emacs][Emacs]]
    - [[#elixirls][ElixirLS]]
  - [[#oh-my-zsh][Oh My Zsh]]
    - [[#antigen][antigen]]

* Usage
Each code block in this file can be evaluated in Emacs with =C-c C-c=. All blocks will prompt
to confirm the action before continuing.

For example:

#+BEGIN_SRC sh :export none :eval query :results silent
echo "Use C-c C-c to execute this block. Found you in ${PWD}/"
#+END_SRC
* TODOs
- [ ] How to generate/import a GPG key
- [X] Try more doom modules (commented out in [[file:doom.org::*init.el][init.el]])
- [ ] Fix completion
- [ ] secret.org for non-public configuration
* Configuration
** MacOS
*** Package management
I use [[https://brew.sh][Homebrew]].

#+BEGIN_SRC sh :export none :eval query :results silent
/usr/bin/env bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
#+END_SRC
*** Window management
[[https://github.com/ianyh/Amethyst][Amethyst]] is a tiling window manager for MacOS.

#+BEGIN_SRC sh :export none :eval query :results silent
brew cask install amethyst
#+END_SRC
*** Terminal
#+BEGIN_SRC sh :export none :eval query :results silent
brew tap homebrew/cask-fonts
brew cask install font-hasklig font-source-code-pro iterm2
#+END_SRC

And some CLI tools:
#+BEGIN_SRC sh :export none :eval query :results silent
brew install cmake fd gnutls ripgrep sd
#+END_SRC
** Git
Make life with Git easier by installing:

+ Newer version of Git
+ Emacs friendly pinentry application
+ [[https://pre-commit.com/][pre-commit]] for managing Git hooks

#+BEGIN_SRC sh :export none :eval query :results silent
brew install git gpg pinentry-mac pre-commit
#+END_SRC

In Emacs, use =C-c C-c= on the following block to write Git configuration
files to disk. See [[file:git.org][git.org]] for more details.

#+BEGIN_SRC sh :export none :eval query :results silent
~/.emacs.d/bin/org-tangle git.org

key=$(gpg --list-secret-keys --keyid-format LONG | grep -e "^sec" | cut -d'/' -f2 | cut -d' ' -f1)
git config --global user.signingkey $key
#+END_SRC
** asdf-vm
I use [[https://asdf-vm.com][asdf]] to manage programming languages and their versions.

#+BEGIN_SRC sh :export none :eval query :results silent
git clone https://github.com/asdf-vm/asdf ~/.asdf --branch v0.7.8
#+END_SRC
*** Erlang
Need build tools. Want observer support (wxWidgets).
#+BEGIN_SRC sh :export none :eval query :results silent
brew install autoconf wxmac
#+END_SRC

#+BEGIN_SRC sh :export none :eval query :results silent
EXPORT default_version=23.0.2

asdf plugin install erlang
KERL_BUILD_DOCS=yes asdf install erlang "$default_version"
asdf global erlang "$default_version"
#+END_SRC
*** Elixir
#+BEGIN_SRC sh :export none :eval query :results silent
EXPORT default_version=1.10.3-otp-23

asdf plugin add elixir
asdf install elixir "$default_version"
asdf global elixir "$default_version"

mix do local.hex --force, local.rebar --force
#+END_SRC
*** NodeJS
#+BEGIN_SRC sh :export none :eval query :results silent
EXPORT default_version=11.15.0

asdf plugin add nodejs
bash -c '${ASDF_DATA_DIR:=$HOME/.asdf}/plugins/nodejs/bin/import-release-team-keyring'
asdf install nodejs "${default_version}"
asdf global nodejs "${default_version}"
#+END_SRC
*** direnv
#+BEGIN_SRC sh :export none :eval query :results silent
EXPORT default_version=2.21.3

asdf plugin add direnv
asdf install direnv "${default_version}"
asdf global direnv "${default_version}"
#+END_SRC
** Doom
Install =doom-emacs= once.
#+BEGIN_SRC sh :export none :eval query :results silent
git clone https://github.com/hlissner/doom-emacs ~/.emacs.d
~/.emacs.d/bin/doom install
#+END_SRC

Doom configuration lives in [[file:doom.org][doom.org]]. Run this every time you
make a change:

#+BEGIN_SRC sh :export none :eval query :results silent
~/.emacs.d/bin/org-tangle doom.org
~/.emacs.d/bin/doom sync
#+END_SRC
*** EditorConfig
#+BEGIN_SRC sh :export none :eval query :results silent
brew install editorconfig
#+END_SRC

*** Emacs
#+BEGIN_SRC sh :export none :eval query :results silent
brew tap d12frosted/emacs-plus
brew install emacs-plus@27 --with-no-titlebar --with-modern-sexy-v2-icon
#+END_SRC
*** ElixirLS
Pin to =v0.5.0= for now, as I'm experience issues with anything newer.
=v0.5.0= pins Elixir to 1.7.4-otp-20, but that doesn't work with Elixir projects using 1.10.x.

Repin to 1.8.2-otp-21 before compiling the LS.
#+BEGIN_SRC sh :export none :eval query :results silent
erlang_version=21.3.8.17
elixir_version=1.8.2-otp-21

git clone https://github.com/elixir-lsp/elixir-ls ~/.elixirls --branch v0.5.0
cd ~/.elixirls

asdf install erlang "${erlang_version}"
asdf local erlang "${erlang_version}"

asdf install elixir "${elixir_version}"
asdf local elixir "${elixir_version}"
#+END_SRC

Release to =~/.elixirls/release=, which is in =PATH=.
#+BEGIN_SRC sh :export none :eval query :results silent
cd ~/.elixirls
mix do deps.get, compile, elixir_ls.release -o release
#+END_SRC
** Oh My Zsh
In Emacs, use =C-c C-c= on the following block to write Git configuration
files to disk. See [[file:zsh.org][zsh.org]] for more details.

#+BEGIN_SRC sh :export none :eval query :results silent
~/.emacs.d/bin/org-tangle zsh.org
#+END_SRC
*** antigen
#+BEGIN_SRC sh :export none :eval query :results silent
curl -L git.io/antigen > ~/antigen.zsh
#+END_SRC
